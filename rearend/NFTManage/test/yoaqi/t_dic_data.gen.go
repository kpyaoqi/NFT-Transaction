// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newTDicDatum(db *gorm.DB) tDicDatum {
	_tDicDatum := tDicDatum{}

	_tDicDatum.tDicDatumDo.UseDB(db)
	_tDicDatum.tDicDatumDo.UseModel(&model.TDicDatum{})

	tableName := _tDicDatum.tDicDatumDo.TableName()
	_tDicDatum.ALL = field.NewAsterisk(tableName)
	_tDicDatum.ID = field.NewString(tableName, "id")
	_tDicDatum.Name = field.NewString(tableName, "name")
	_tDicDatum.Code = field.NewString(tableName, "code")
	_tDicDatum.Val = field.NewString(tableName, "val")
	_tDicDatum.Pid = field.NewString(tableName, "pid")
	_tDicDatum.Sortno = field.NewInt64(tableName, "sortno")
	_tDicDatum.Remark = field.NewString(tableName, "remark")
	_tDicDatum.Active = field.NewInt64(tableName, "active")
	_tDicDatum.CreateTime = field.NewTime(tableName, "createTime")
	_tDicDatum.Typekey = field.NewString(tableName, "typekey")
	_tDicDatum.Bak1 = field.NewString(tableName, "bak1")
	_tDicDatum.Bak2 = field.NewString(tableName, "bak2")
	_tDicDatum.Bak3 = field.NewString(tableName, "bak3")
	_tDicDatum.Bak4 = field.NewString(tableName, "bak4")
	_tDicDatum.Bak5 = field.NewString(tableName, "bak5")

	_tDicDatum.fillFieldMap()

	return _tDicDatum
}

type tDicDatum struct {
	tDicDatumDo tDicDatumDo

	ALL        field.Asterisk
	ID         field.String
	Name       field.String // 名称
	Code       field.String // 编码
	Val        field.String // 值
	Pid        field.String // 父ID
	Sortno     field.Int64  // 排序
	Remark     field.String // 描述
	Active     field.Int64  // 是否有效(0否,1是)
	CreateTime field.Time   // 创建时间
	Typekey    field.String // 类型
	Bak1       field.String
	Bak2       field.String
	Bak3       field.String
	Bak4       field.String
	Bak5       field.String

	fieldMap map[string]field.Expr
}

func (t tDicDatum) Table(newTableName string) *tDicDatum {
	t.tDicDatumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tDicDatum) As(alias string) *tDicDatum {
	t.tDicDatumDo.DO = *(t.tDicDatumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tDicDatum) updateTableName(table string) *tDicDatum {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.Name = field.NewString(table, "name")
	t.Code = field.NewString(table, "code")
	t.Val = field.NewString(table, "val")
	t.Pid = field.NewString(table, "pid")
	t.Sortno = field.NewInt64(table, "sortno")
	t.Remark = field.NewString(table, "remark")
	t.Active = field.NewInt64(table, "active")
	t.CreateTime = field.NewTime(table, "createTime")
	t.Typekey = field.NewString(table, "typekey")
	t.Bak1 = field.NewString(table, "bak1")
	t.Bak2 = field.NewString(table, "bak2")
	t.Bak3 = field.NewString(table, "bak3")
	t.Bak4 = field.NewString(table, "bak4")
	t.Bak5 = field.NewString(table, "bak5")

	t.fillFieldMap()

	return t
}

func (t *tDicDatum) WithContext(ctx context.Context) ITDicDatumDo {
	return t.tDicDatumDo.WithContext(ctx)
}

func (t tDicDatum) TableName() string { return t.tDicDatumDo.TableName() }

func (t tDicDatum) Alias() string { return t.tDicDatumDo.Alias() }

func (t *tDicDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tDicDatum) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["code"] = t.Code
	t.fieldMap["val"] = t.Val
	t.fieldMap["pid"] = t.Pid
	t.fieldMap["sortno"] = t.Sortno
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["active"] = t.Active
	t.fieldMap["createTime"] = t.CreateTime
	t.fieldMap["typekey"] = t.Typekey
	t.fieldMap["bak1"] = t.Bak1
	t.fieldMap["bak2"] = t.Bak2
	t.fieldMap["bak3"] = t.Bak3
	t.fieldMap["bak4"] = t.Bak4
	t.fieldMap["bak5"] = t.Bak5
}

func (t tDicDatum) clone(db *gorm.DB) tDicDatum {
	t.tDicDatumDo.ReplaceDB(db)
	return t
}

type tDicDatumDo struct{ gen.DO }

type ITDicDatumDo interface {
	gen.SubQuery
	Debug() ITDicDatumDo
	WithContext(ctx context.Context) ITDicDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITDicDatumDo
	Not(conds ...gen.Condition) ITDicDatumDo
	Or(conds ...gen.Condition) ITDicDatumDo
	Select(conds ...field.Expr) ITDicDatumDo
	Where(conds ...gen.Condition) ITDicDatumDo
	Order(conds ...field.Expr) ITDicDatumDo
	Distinct(cols ...field.Expr) ITDicDatumDo
	Omit(cols ...field.Expr) ITDicDatumDo
	Join(table schema.Tabler, on ...field.Expr) ITDicDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITDicDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITDicDatumDo
	Group(cols ...field.Expr) ITDicDatumDo
	Having(conds ...gen.Condition) ITDicDatumDo
	Limit(limit int) ITDicDatumDo
	Offset(offset int) ITDicDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITDicDatumDo
	Unscoped() ITDicDatumDo
	Create(values ...*model.TDicDatum) error
	CreateInBatches(values []*model.TDicDatum, batchSize int) error
	Save(values ...*model.TDicDatum) error
	First() (*model.TDicDatum, error)
	Take() (*model.TDicDatum, error)
	Last() (*model.TDicDatum, error)
	Find() ([]*model.TDicDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDicDatum, err error)
	FindInBatches(result *[]*model.TDicDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TDicDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITDicDatumDo
	Assign(attrs ...field.AssignExpr) ITDicDatumDo
	Joins(fields ...field.RelationField) ITDicDatumDo
	Preload(fields ...field.RelationField) ITDicDatumDo
	FirstOrInit() (*model.TDicDatum, error)
	FirstOrCreate() (*model.TDicDatum, error)
	FindByPage(offset int, limit int) (result []*model.TDicDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITDicDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tDicDatumDo) Debug() ITDicDatumDo {
	return t.withDO(t.DO.Debug())
}

func (t tDicDatumDo) WithContext(ctx context.Context) ITDicDatumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tDicDatumDo) ReadDB() ITDicDatumDo {
	return t.Clauses(dbresolver.Read)
}

func (t tDicDatumDo) WriteDB() ITDicDatumDo {
	return t.Clauses(dbresolver.Write)
}

func (t tDicDatumDo) Clauses(conds ...clause.Expression) ITDicDatumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tDicDatumDo) Returning(value interface{}, columns ...string) ITDicDatumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tDicDatumDo) Not(conds ...gen.Condition) ITDicDatumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tDicDatumDo) Or(conds ...gen.Condition) ITDicDatumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tDicDatumDo) Select(conds ...field.Expr) ITDicDatumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tDicDatumDo) Where(conds ...gen.Condition) ITDicDatumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tDicDatumDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITDicDatumDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tDicDatumDo) Order(conds ...field.Expr) ITDicDatumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tDicDatumDo) Distinct(cols ...field.Expr) ITDicDatumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tDicDatumDo) Omit(cols ...field.Expr) ITDicDatumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tDicDatumDo) Join(table schema.Tabler, on ...field.Expr) ITDicDatumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tDicDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITDicDatumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tDicDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) ITDicDatumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tDicDatumDo) Group(cols ...field.Expr) ITDicDatumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tDicDatumDo) Having(conds ...gen.Condition) ITDicDatumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tDicDatumDo) Limit(limit int) ITDicDatumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tDicDatumDo) Offset(offset int) ITDicDatumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tDicDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITDicDatumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tDicDatumDo) Unscoped() ITDicDatumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tDicDatumDo) Create(values ...*model.TDicDatum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tDicDatumDo) CreateInBatches(values []*model.TDicDatum, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tDicDatumDo) Save(values ...*model.TDicDatum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tDicDatumDo) First() (*model.TDicDatum, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDicDatum), nil
	}
}

func (t tDicDatumDo) Take() (*model.TDicDatum, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDicDatum), nil
	}
}

func (t tDicDatumDo) Last() (*model.TDicDatum, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDicDatum), nil
	}
}

func (t tDicDatumDo) Find() ([]*model.TDicDatum, error) {
	result, err := t.DO.Find()
	return result.([]*model.TDicDatum), err
}

func (t tDicDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDicDatum, err error) {
	buf := make([]*model.TDicDatum, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tDicDatumDo) FindInBatches(result *[]*model.TDicDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tDicDatumDo) Attrs(attrs ...field.AssignExpr) ITDicDatumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tDicDatumDo) Assign(attrs ...field.AssignExpr) ITDicDatumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tDicDatumDo) Joins(fields ...field.RelationField) ITDicDatumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tDicDatumDo) Preload(fields ...field.RelationField) ITDicDatumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tDicDatumDo) FirstOrInit() (*model.TDicDatum, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDicDatum), nil
	}
}

func (t tDicDatumDo) FirstOrCreate() (*model.TDicDatum, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDicDatum), nil
	}
}

func (t tDicDatumDo) FindByPage(offset int, limit int) (result []*model.TDicDatum, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tDicDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tDicDatumDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tDicDatumDo) Delete(models ...*model.TDicDatum) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tDicDatumDo) withDO(do gen.Dao) *tDicDatumDo {
	t.DO = *do.(*gen.DO)
	return t
}
