// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newWxCpconfig(db *gorm.DB) wxCpconfig {
	_wxCpconfig := wxCpconfig{}

	_wxCpconfig.wxCpconfigDo.UseDB(db)
	_wxCpconfig.wxCpconfigDo.UseModel(&model.WxCpconfig{})

	tableName := _wxCpconfig.wxCpconfigDo.TableName()
	_wxCpconfig.ALL = field.NewAsterisk(tableName)
	_wxCpconfig.ID = field.NewString(tableName, "id")
	_wxCpconfig.OrgID = field.NewString(tableName, "orgId")
	_wxCpconfig.AppID = field.NewString(tableName, "appId")
	_wxCpconfig.Secret = field.NewString(tableName, "secret")
	_wxCpconfig.Active = field.NewInt64(tableName, "active")
	_wxCpconfig.Bak1 = field.NewString(tableName, "bak1")
	_wxCpconfig.Bak2 = field.NewString(tableName, "bak2")
	_wxCpconfig.Bak3 = field.NewString(tableName, "bak3")
	_wxCpconfig.Bak4 = field.NewString(tableName, "bak4")
	_wxCpconfig.Bak5 = field.NewString(tableName, "bak5")

	_wxCpconfig.fillFieldMap()

	return _wxCpconfig
}

type wxCpconfig struct {
	wxCpconfigDo wxCpconfigDo

	ALL    field.Asterisk
	ID     field.String
	OrgID  field.String // 站点Id
	AppID  field.String // 开发者Id
	Secret field.String // 应用密钥
	Active field.Int64  // 状态 0不可用,1可用
	Bak1   field.String
	Bak2   field.String
	Bak3   field.String
	Bak4   field.String
	Bak5   field.String

	fieldMap map[string]field.Expr
}

func (w wxCpconfig) Table(newTableName string) *wxCpconfig {
	w.wxCpconfigDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wxCpconfig) As(alias string) *wxCpconfig {
	w.wxCpconfigDo.DO = *(w.wxCpconfigDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wxCpconfig) updateTableName(table string) *wxCpconfig {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewString(table, "id")
	w.OrgID = field.NewString(table, "orgId")
	w.AppID = field.NewString(table, "appId")
	w.Secret = field.NewString(table, "secret")
	w.Active = field.NewInt64(table, "active")
	w.Bak1 = field.NewString(table, "bak1")
	w.Bak2 = field.NewString(table, "bak2")
	w.Bak3 = field.NewString(table, "bak3")
	w.Bak4 = field.NewString(table, "bak4")
	w.Bak5 = field.NewString(table, "bak5")

	w.fillFieldMap()

	return w
}

func (w *wxCpconfig) WithContext(ctx context.Context) IWxCpconfigDo {
	return w.wxCpconfigDo.WithContext(ctx)
}

func (w wxCpconfig) TableName() string { return w.wxCpconfigDo.TableName() }

func (w wxCpconfig) Alias() string { return w.wxCpconfigDo.Alias() }

func (w *wxCpconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wxCpconfig) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["orgId"] = w.OrgID
	w.fieldMap["appId"] = w.AppID
	w.fieldMap["secret"] = w.Secret
	w.fieldMap["active"] = w.Active
	w.fieldMap["bak1"] = w.Bak1
	w.fieldMap["bak2"] = w.Bak2
	w.fieldMap["bak3"] = w.Bak3
	w.fieldMap["bak4"] = w.Bak4
	w.fieldMap["bak5"] = w.Bak5
}

func (w wxCpconfig) clone(db *gorm.DB) wxCpconfig {
	w.wxCpconfigDo.ReplaceDB(db)
	return w
}

type wxCpconfigDo struct{ gen.DO }

type IWxCpconfigDo interface {
	gen.SubQuery
	Debug() IWxCpconfigDo
	WithContext(ctx context.Context) IWxCpconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWxCpconfigDo
	Not(conds ...gen.Condition) IWxCpconfigDo
	Or(conds ...gen.Condition) IWxCpconfigDo
	Select(conds ...field.Expr) IWxCpconfigDo
	Where(conds ...gen.Condition) IWxCpconfigDo
	Order(conds ...field.Expr) IWxCpconfigDo
	Distinct(cols ...field.Expr) IWxCpconfigDo
	Omit(cols ...field.Expr) IWxCpconfigDo
	Join(table schema.Tabler, on ...field.Expr) IWxCpconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWxCpconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWxCpconfigDo
	Group(cols ...field.Expr) IWxCpconfigDo
	Having(conds ...gen.Condition) IWxCpconfigDo
	Limit(limit int) IWxCpconfigDo
	Offset(offset int) IWxCpconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWxCpconfigDo
	Unscoped() IWxCpconfigDo
	Create(values ...*model.WxCpconfig) error
	CreateInBatches(values []*model.WxCpconfig, batchSize int) error
	Save(values ...*model.WxCpconfig) error
	First() (*model.WxCpconfig, error)
	Take() (*model.WxCpconfig, error)
	Last() (*model.WxCpconfig, error)
	Find() ([]*model.WxCpconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxCpconfig, err error)
	FindInBatches(result *[]*model.WxCpconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WxCpconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWxCpconfigDo
	Assign(attrs ...field.AssignExpr) IWxCpconfigDo
	Joins(fields ...field.RelationField) IWxCpconfigDo
	Preload(fields ...field.RelationField) IWxCpconfigDo
	FirstOrInit() (*model.WxCpconfig, error)
	FirstOrCreate() (*model.WxCpconfig, error)
	FindByPage(offset int, limit int) (result []*model.WxCpconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWxCpconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wxCpconfigDo) Debug() IWxCpconfigDo {
	return w.withDO(w.DO.Debug())
}

func (w wxCpconfigDo) WithContext(ctx context.Context) IWxCpconfigDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wxCpconfigDo) ReadDB() IWxCpconfigDo {
	return w.Clauses(dbresolver.Read)
}

func (w wxCpconfigDo) WriteDB() IWxCpconfigDo {
	return w.Clauses(dbresolver.Write)
}

func (w wxCpconfigDo) Clauses(conds ...clause.Expression) IWxCpconfigDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wxCpconfigDo) Returning(value interface{}, columns ...string) IWxCpconfigDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wxCpconfigDo) Not(conds ...gen.Condition) IWxCpconfigDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wxCpconfigDo) Or(conds ...gen.Condition) IWxCpconfigDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wxCpconfigDo) Select(conds ...field.Expr) IWxCpconfigDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wxCpconfigDo) Where(conds ...gen.Condition) IWxCpconfigDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wxCpconfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWxCpconfigDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wxCpconfigDo) Order(conds ...field.Expr) IWxCpconfigDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wxCpconfigDo) Distinct(cols ...field.Expr) IWxCpconfigDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wxCpconfigDo) Omit(cols ...field.Expr) IWxCpconfigDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wxCpconfigDo) Join(table schema.Tabler, on ...field.Expr) IWxCpconfigDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wxCpconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWxCpconfigDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wxCpconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IWxCpconfigDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wxCpconfigDo) Group(cols ...field.Expr) IWxCpconfigDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wxCpconfigDo) Having(conds ...gen.Condition) IWxCpconfigDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wxCpconfigDo) Limit(limit int) IWxCpconfigDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wxCpconfigDo) Offset(offset int) IWxCpconfigDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wxCpconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWxCpconfigDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wxCpconfigDo) Unscoped() IWxCpconfigDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wxCpconfigDo) Create(values ...*model.WxCpconfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wxCpconfigDo) CreateInBatches(values []*model.WxCpconfig, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wxCpconfigDo) Save(values ...*model.WxCpconfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wxCpconfigDo) First() (*model.WxCpconfig, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxCpconfig), nil
	}
}

func (w wxCpconfigDo) Take() (*model.WxCpconfig, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxCpconfig), nil
	}
}

func (w wxCpconfigDo) Last() (*model.WxCpconfig, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxCpconfig), nil
	}
}

func (w wxCpconfigDo) Find() ([]*model.WxCpconfig, error) {
	result, err := w.DO.Find()
	return result.([]*model.WxCpconfig), err
}

func (w wxCpconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxCpconfig, err error) {
	buf := make([]*model.WxCpconfig, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wxCpconfigDo) FindInBatches(result *[]*model.WxCpconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wxCpconfigDo) Attrs(attrs ...field.AssignExpr) IWxCpconfigDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wxCpconfigDo) Assign(attrs ...field.AssignExpr) IWxCpconfigDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wxCpconfigDo) Joins(fields ...field.RelationField) IWxCpconfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wxCpconfigDo) Preload(fields ...field.RelationField) IWxCpconfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wxCpconfigDo) FirstOrInit() (*model.WxCpconfig, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxCpconfig), nil
	}
}

func (w wxCpconfigDo) FirstOrCreate() (*model.WxCpconfig, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxCpconfig), nil
	}
}

func (w wxCpconfigDo) FindByPage(offset int, limit int) (result []*model.WxCpconfig, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wxCpconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wxCpconfigDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wxCpconfigDo) Delete(models ...*model.WxCpconfig) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wxCpconfigDo) withDO(do gen.Dao) *wxCpconfigDo {
	w.DO = *do.(*gen.DO)
	return w
}
