// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newTAuditlogHistory2019(db *gorm.DB) tAuditlogHistory2019 {
	_tAuditlogHistory2019 := tAuditlogHistory2019{}

	_tAuditlogHistory2019.tAuditlogHistory2019Do.UseDB(db)
	_tAuditlogHistory2019.tAuditlogHistory2019Do.UseModel(&model.TAuditlogHistory2019{})

	tableName := _tAuditlogHistory2019.tAuditlogHistory2019Do.TableName()
	_tAuditlogHistory2019.ALL = field.NewAsterisk(tableName)
	_tAuditlogHistory2019.ID = field.NewString(tableName, "id")
	_tAuditlogHistory2019.OperationType = field.NewString(tableName, "operationType")
	_tAuditlogHistory2019.OperatorName = field.NewString(tableName, "operatorName")
	_tAuditlogHistory2019.PreValue = field.NewString(tableName, "preValue")
	_tAuditlogHistory2019.CurValue = field.NewString(tableName, "curValue")
	_tAuditlogHistory2019.OperationTime = field.NewTime(tableName, "operationTime")
	_tAuditlogHistory2019.OperationClass = field.NewString(tableName, "operationClass")
	_tAuditlogHistory2019.OperationClassID = field.NewString(tableName, "operationClassID")
	_tAuditlogHistory2019.Bak1 = field.NewString(tableName, "bak1")
	_tAuditlogHistory2019.Bak2 = field.NewString(tableName, "bak2")
	_tAuditlogHistory2019.Bak3 = field.NewString(tableName, "bak3")
	_tAuditlogHistory2019.Bak4 = field.NewString(tableName, "bak4")
	_tAuditlogHistory2019.Bak5 = field.NewString(tableName, "bak5")

	_tAuditlogHistory2019.fillFieldMap()

	return _tAuditlogHistory2019
}

type tAuditlogHistory2019 struct {
	tAuditlogHistory2019Do tAuditlogHistory2019Do

	ALL              field.Asterisk
	ID               field.String // ID
	OperationType    field.String // 操作类型
	OperatorName     field.String // 操作人姓名
	PreValue         field.String // 旧值
	CurValue         field.String // 新值
	OperationTime    field.Time   // 操作时间
	OperationClass   field.String // 操作类
	OperationClassID field.String // 记录ID
	Bak1             field.String
	Bak2             field.String
	Bak3             field.String
	Bak4             field.String
	Bak5             field.String

	fieldMap map[string]field.Expr
}

func (t tAuditlogHistory2019) Table(newTableName string) *tAuditlogHistory2019 {
	t.tAuditlogHistory2019Do.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAuditlogHistory2019) As(alias string) *tAuditlogHistory2019 {
	t.tAuditlogHistory2019Do.DO = *(t.tAuditlogHistory2019Do.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAuditlogHistory2019) updateTableName(table string) *tAuditlogHistory2019 {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.OperationType = field.NewString(table, "operationType")
	t.OperatorName = field.NewString(table, "operatorName")
	t.PreValue = field.NewString(table, "preValue")
	t.CurValue = field.NewString(table, "curValue")
	t.OperationTime = field.NewTime(table, "operationTime")
	t.OperationClass = field.NewString(table, "operationClass")
	t.OperationClassID = field.NewString(table, "operationClassID")
	t.Bak1 = field.NewString(table, "bak1")
	t.Bak2 = field.NewString(table, "bak2")
	t.Bak3 = field.NewString(table, "bak3")
	t.Bak4 = field.NewString(table, "bak4")
	t.Bak5 = field.NewString(table, "bak5")

	t.fillFieldMap()

	return t
}

func (t *tAuditlogHistory2019) WithContext(ctx context.Context) ITAuditlogHistory2019Do {
	return t.tAuditlogHistory2019Do.WithContext(ctx)
}

func (t tAuditlogHistory2019) TableName() string { return t.tAuditlogHistory2019Do.TableName() }

func (t tAuditlogHistory2019) Alias() string { return t.tAuditlogHistory2019Do.Alias() }

func (t *tAuditlogHistory2019) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAuditlogHistory2019) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.ID
	t.fieldMap["operationType"] = t.OperationType
	t.fieldMap["operatorName"] = t.OperatorName
	t.fieldMap["preValue"] = t.PreValue
	t.fieldMap["curValue"] = t.CurValue
	t.fieldMap["operationTime"] = t.OperationTime
	t.fieldMap["operationClass"] = t.OperationClass
	t.fieldMap["operationClassID"] = t.OperationClassID
	t.fieldMap["bak1"] = t.Bak1
	t.fieldMap["bak2"] = t.Bak2
	t.fieldMap["bak3"] = t.Bak3
	t.fieldMap["bak4"] = t.Bak4
	t.fieldMap["bak5"] = t.Bak5
}

func (t tAuditlogHistory2019) clone(db *gorm.DB) tAuditlogHistory2019 {
	t.tAuditlogHistory2019Do.ReplaceDB(db)
	return t
}

type tAuditlogHistory2019Do struct{ gen.DO }

type ITAuditlogHistory2019Do interface {
	gen.SubQuery
	Debug() ITAuditlogHistory2019Do
	WithContext(ctx context.Context) ITAuditlogHistory2019Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITAuditlogHistory2019Do
	Not(conds ...gen.Condition) ITAuditlogHistory2019Do
	Or(conds ...gen.Condition) ITAuditlogHistory2019Do
	Select(conds ...field.Expr) ITAuditlogHistory2019Do
	Where(conds ...gen.Condition) ITAuditlogHistory2019Do
	Order(conds ...field.Expr) ITAuditlogHistory2019Do
	Distinct(cols ...field.Expr) ITAuditlogHistory2019Do
	Omit(cols ...field.Expr) ITAuditlogHistory2019Do
	Join(table schema.Tabler, on ...field.Expr) ITAuditlogHistory2019Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAuditlogHistory2019Do
	RightJoin(table schema.Tabler, on ...field.Expr) ITAuditlogHistory2019Do
	Group(cols ...field.Expr) ITAuditlogHistory2019Do
	Having(conds ...gen.Condition) ITAuditlogHistory2019Do
	Limit(limit int) ITAuditlogHistory2019Do
	Offset(offset int) ITAuditlogHistory2019Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITAuditlogHistory2019Do
	Unscoped() ITAuditlogHistory2019Do
	Create(values ...*model.TAuditlogHistory2019) error
	CreateInBatches(values []*model.TAuditlogHistory2019, batchSize int) error
	Save(values ...*model.TAuditlogHistory2019) error
	First() (*model.TAuditlogHistory2019, error)
	Take() (*model.TAuditlogHistory2019, error)
	Last() (*model.TAuditlogHistory2019, error)
	Find() ([]*model.TAuditlogHistory2019, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAuditlogHistory2019, err error)
	FindInBatches(result *[]*model.TAuditlogHistory2019, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAuditlogHistory2019) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITAuditlogHistory2019Do
	Assign(attrs ...field.AssignExpr) ITAuditlogHistory2019Do
	Joins(fields ...field.RelationField) ITAuditlogHistory2019Do
	Preload(fields ...field.RelationField) ITAuditlogHistory2019Do
	FirstOrInit() (*model.TAuditlogHistory2019, error)
	FirstOrCreate() (*model.TAuditlogHistory2019, error)
	FindByPage(offset int, limit int) (result []*model.TAuditlogHistory2019, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAuditlogHistory2019Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tAuditlogHistory2019Do) Debug() ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Debug())
}

func (t tAuditlogHistory2019Do) WithContext(ctx context.Context) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAuditlogHistory2019Do) ReadDB() ITAuditlogHistory2019Do {
	return t.Clauses(dbresolver.Read)
}

func (t tAuditlogHistory2019Do) WriteDB() ITAuditlogHistory2019Do {
	return t.Clauses(dbresolver.Write)
}

func (t tAuditlogHistory2019Do) Clauses(conds ...clause.Expression) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAuditlogHistory2019Do) Returning(value interface{}, columns ...string) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAuditlogHistory2019Do) Not(conds ...gen.Condition) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAuditlogHistory2019Do) Or(conds ...gen.Condition) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAuditlogHistory2019Do) Select(conds ...field.Expr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAuditlogHistory2019Do) Where(conds ...gen.Condition) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAuditlogHistory2019Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITAuditlogHistory2019Do {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tAuditlogHistory2019Do) Order(conds ...field.Expr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAuditlogHistory2019Do) Distinct(cols ...field.Expr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAuditlogHistory2019Do) Omit(cols ...field.Expr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAuditlogHistory2019Do) Join(table schema.Tabler, on ...field.Expr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAuditlogHistory2019Do) LeftJoin(table schema.Tabler, on ...field.Expr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAuditlogHistory2019Do) RightJoin(table schema.Tabler, on ...field.Expr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAuditlogHistory2019Do) Group(cols ...field.Expr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAuditlogHistory2019Do) Having(conds ...gen.Condition) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAuditlogHistory2019Do) Limit(limit int) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAuditlogHistory2019Do) Offset(offset int) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAuditlogHistory2019Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAuditlogHistory2019Do) Unscoped() ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Unscoped())
}

func (t tAuditlogHistory2019Do) Create(values ...*model.TAuditlogHistory2019) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAuditlogHistory2019Do) CreateInBatches(values []*model.TAuditlogHistory2019, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAuditlogHistory2019Do) Save(values ...*model.TAuditlogHistory2019) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAuditlogHistory2019Do) First() (*model.TAuditlogHistory2019, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuditlogHistory2019), nil
	}
}

func (t tAuditlogHistory2019Do) Take() (*model.TAuditlogHistory2019, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuditlogHistory2019), nil
	}
}

func (t tAuditlogHistory2019Do) Last() (*model.TAuditlogHistory2019, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuditlogHistory2019), nil
	}
}

func (t tAuditlogHistory2019Do) Find() ([]*model.TAuditlogHistory2019, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAuditlogHistory2019), err
}

func (t tAuditlogHistory2019Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAuditlogHistory2019, err error) {
	buf := make([]*model.TAuditlogHistory2019, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAuditlogHistory2019Do) FindInBatches(result *[]*model.TAuditlogHistory2019, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAuditlogHistory2019Do) Attrs(attrs ...field.AssignExpr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAuditlogHistory2019Do) Assign(attrs ...field.AssignExpr) ITAuditlogHistory2019Do {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAuditlogHistory2019Do) Joins(fields ...field.RelationField) ITAuditlogHistory2019Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAuditlogHistory2019Do) Preload(fields ...field.RelationField) ITAuditlogHistory2019Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAuditlogHistory2019Do) FirstOrInit() (*model.TAuditlogHistory2019, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuditlogHistory2019), nil
	}
}

func (t tAuditlogHistory2019Do) FirstOrCreate() (*model.TAuditlogHistory2019, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuditlogHistory2019), nil
	}
}

func (t tAuditlogHistory2019Do) FindByPage(offset int, limit int) (result []*model.TAuditlogHistory2019, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAuditlogHistory2019Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAuditlogHistory2019Do) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAuditlogHistory2019Do) Delete(models ...*model.TAuditlogHistory2019) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAuditlogHistory2019Do) withDO(do gen.Dao) *tAuditlogHistory2019Do {
	t.DO = *do.(*gen.DO)
	return t
}
