// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q                    = new(Query)
	AliPayconfig         *aliPayconfig
	BranchTable          *branchTable
	GlobalTable          *globalTable
	LockTable            *lockTable
	NftChainPlat         *nftChainPlat
	NftCollection        *nftCollection
	NftOrder             *nftOrder
	NftType              *nftType
	NftUserAsset         *nftUserAsset
	NftUserChainplat     *nftUserChainplat
	NftUserReal          *nftUserReal
	NftWork              *nftWork
	NftWorksHi           *nftWorksHi
	NftWorksPrice        *nftWorksPrice
	TArticle             *tArticle
	TAttachment          *tAttachment
	TAuditlogHistory2019 *tAuditlogHistory2019
	TAuditlogHistory2020 *tAuditlogHistory2020
	TDicDatum            *tDicDatum
	TFwlogHistory2019    *tFwlogHistory2019
	TFwlogHistory2020    *tFwlogHistory2020
	TMenu                *tMenu
	TNotify              *tNotify
	TOrg                 *tOrg
	TPermissionsLog      *tPermissionsLog
	TRole                *tRole
	TRoleMenu            *tRoleMenu
	TRoleOrg             *tRoleOrg
	TTableindex          *tTableindex
	TUser                *tUser
	TUserFollow          *tUserFollow
	TUserOrg             *tUserOrg
	TUserPlatformInfo    *tUserPlatformInfo
	TUserRole            *tUserRole
	UndoLog              *undoLog
	WxCpconfig           *wxCpconfig
	WxMenu               *wxMenu
	WxMiniappconfig      *wxMiniappconfig
	WxMpconfig           *wxMpconfig
	WxPayconfig          *wxPayconfig
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	AliPayconfig = &Q.AliPayconfig
	BranchTable = &Q.BranchTable
	GlobalTable = &Q.GlobalTable
	LockTable = &Q.LockTable
	NftChainPlat = &Q.NftChainPlat
	NftCollection = &Q.NftCollection
	NftOrder = &Q.NftOrder
	NftType = &Q.NftType
	NftUserAsset = &Q.NftUserAsset
	NftUserChainplat = &Q.NftUserChainplat
	NftUserReal = &Q.NftUserReal
	NftWork = &Q.NftWork
	NftWorksHi = &Q.NftWorksHi
	NftWorksPrice = &Q.NftWorksPrice
	TArticle = &Q.TArticle
	TAttachment = &Q.TAttachment
	TAuditlogHistory2019 = &Q.TAuditlogHistory2019
	TAuditlogHistory2020 = &Q.TAuditlogHistory2020
	TDicDatum = &Q.TDicDatum
	TFwlogHistory2019 = &Q.TFwlogHistory2019
	TFwlogHistory2020 = &Q.TFwlogHistory2020
	TMenu = &Q.TMenu
	TNotify = &Q.TNotify
	TOrg = &Q.TOrg
	TPermissionsLog = &Q.TPermissionsLog
	TRole = &Q.TRole
	TRoleMenu = &Q.TRoleMenu
	TRoleOrg = &Q.TRoleOrg
	TTableindex = &Q.TTableindex
	TUser = &Q.TUser
	TUserFollow = &Q.TUserFollow
	TUserOrg = &Q.TUserOrg
	TUserPlatformInfo = &Q.TUserPlatformInfo
	TUserRole = &Q.TUserRole
	UndoLog = &Q.UndoLog
	WxCpconfig = &Q.WxCpconfig
	WxMenu = &Q.WxMenu
	WxMiniappconfig = &Q.WxMiniappconfig
	WxMpconfig = &Q.WxMpconfig
	WxPayconfig = &Q.WxPayconfig
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		AliPayconfig:         newAliPayconfig(db),
		BranchTable:          newBranchTable(db),
		GlobalTable:          newGlobalTable(db),
		LockTable:            newLockTable(db),
		NftChainPlat:         newNftChainPlat(db),
		NftCollection:        newNftCollection(db),
		NftOrder:             newNftOrder(db),
		NftType:              newNftType(db),
		NftUserAsset:         newNftUserAsset(db),
		NftUserChainplat:     newNftUserChainplat(db),
		NftUserReal:          newNftUserReal(db),
		NftWork:              newNftWork(db),
		NftWorksHi:           newNftWorksHi(db),
		NftWorksPrice:        newNftWorksPrice(db),
		TArticle:             newTArticle(db),
		TAttachment:          newTAttachment(db),
		TAuditlogHistory2019: newTAuditlogHistory2019(db),
		TAuditlogHistory2020: newTAuditlogHistory2020(db),
		TDicDatum:            newTDicDatum(db),
		TFwlogHistory2019:    newTFwlogHistory2019(db),
		TFwlogHistory2020:    newTFwlogHistory2020(db),
		TMenu:                newTMenu(db),
		TNotify:              newTNotify(db),
		TOrg:                 newTOrg(db),
		TPermissionsLog:      newTPermissionsLog(db),
		TRole:                newTRole(db),
		TRoleMenu:            newTRoleMenu(db),
		TRoleOrg:             newTRoleOrg(db),
		TTableindex:          newTTableindex(db),
		TUser:                newTUser(db),
		TUserFollow:          newTUserFollow(db),
		TUserOrg:             newTUserOrg(db),
		TUserPlatformInfo:    newTUserPlatformInfo(db),
		TUserRole:            newTUserRole(db),
		UndoLog:              newUndoLog(db),
		WxCpconfig:           newWxCpconfig(db),
		WxMenu:               newWxMenu(db),
		WxMiniappconfig:      newWxMiniappconfig(db),
		WxMpconfig:           newWxMpconfig(db),
		WxPayconfig:          newWxPayconfig(db),
	}
}

type Query struct {
	db *gorm.DB

	AliPayconfig         aliPayconfig
	BranchTable          branchTable
	GlobalTable          globalTable
	LockTable            lockTable
	NftChainPlat         nftChainPlat
	NftCollection        nftCollection
	NftOrder             nftOrder
	NftType              nftType
	NftUserAsset         nftUserAsset
	NftUserChainplat     nftUserChainplat
	NftUserReal          nftUserReal
	NftWork              nftWork
	NftWorksHi           nftWorksHi
	NftWorksPrice        nftWorksPrice
	TArticle             tArticle
	TAttachment          tAttachment
	TAuditlogHistory2019 tAuditlogHistory2019
	TAuditlogHistory2020 tAuditlogHistory2020
	TDicDatum            tDicDatum
	TFwlogHistory2019    tFwlogHistory2019
	TFwlogHistory2020    tFwlogHistory2020
	TMenu                tMenu
	TNotify              tNotify
	TOrg                 tOrg
	TPermissionsLog      tPermissionsLog
	TRole                tRole
	TRoleMenu            tRoleMenu
	TRoleOrg             tRoleOrg
	TTableindex          tTableindex
	TUser                tUser
	TUserFollow          tUserFollow
	TUserOrg             tUserOrg
	TUserPlatformInfo    tUserPlatformInfo
	TUserRole            tUserRole
	UndoLog              undoLog
	WxCpconfig           wxCpconfig
	WxMenu               wxMenu
	WxMiniappconfig      wxMiniappconfig
	WxMpconfig           wxMpconfig
	WxPayconfig          wxPayconfig
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		AliPayconfig:         q.AliPayconfig.clone(db),
		BranchTable:          q.BranchTable.clone(db),
		GlobalTable:          q.GlobalTable.clone(db),
		LockTable:            q.LockTable.clone(db),
		NftChainPlat:         q.NftChainPlat.clone(db),
		NftCollection:        q.NftCollection.clone(db),
		NftOrder:             q.NftOrder.clone(db),
		NftType:              q.NftType.clone(db),
		NftUserAsset:         q.NftUserAsset.clone(db),
		NftUserChainplat:     q.NftUserChainplat.clone(db),
		NftUserReal:          q.NftUserReal.clone(db),
		NftWork:              q.NftWork.clone(db),
		NftWorksHi:           q.NftWorksHi.clone(db),
		NftWorksPrice:        q.NftWorksPrice.clone(db),
		TArticle:             q.TArticle.clone(db),
		TAttachment:          q.TAttachment.clone(db),
		TAuditlogHistory2019: q.TAuditlogHistory2019.clone(db),
		TAuditlogHistory2020: q.TAuditlogHistory2020.clone(db),
		TDicDatum:            q.TDicDatum.clone(db),
		TFwlogHistory2019:    q.TFwlogHistory2019.clone(db),
		TFwlogHistory2020:    q.TFwlogHistory2020.clone(db),
		TMenu:                q.TMenu.clone(db),
		TNotify:              q.TNotify.clone(db),
		TOrg:                 q.TOrg.clone(db),
		TPermissionsLog:      q.TPermissionsLog.clone(db),
		TRole:                q.TRole.clone(db),
		TRoleMenu:            q.TRoleMenu.clone(db),
		TRoleOrg:             q.TRoleOrg.clone(db),
		TTableindex:          q.TTableindex.clone(db),
		TUser:                q.TUser.clone(db),
		TUserFollow:          q.TUserFollow.clone(db),
		TUserOrg:             q.TUserOrg.clone(db),
		TUserPlatformInfo:    q.TUserPlatformInfo.clone(db),
		TUserRole:            q.TUserRole.clone(db),
		UndoLog:              q.UndoLog.clone(db),
		WxCpconfig:           q.WxCpconfig.clone(db),
		WxMenu:               q.WxMenu.clone(db),
		WxMiniappconfig:      q.WxMiniappconfig.clone(db),
		WxMpconfig:           q.WxMpconfig.clone(db),
		WxPayconfig:          q.WxPayconfig.clone(db),
	}
}

type queryCtx struct {
	AliPayconfig         IAliPayconfigDo
	BranchTable          IBranchTableDo
	GlobalTable          IGlobalTableDo
	LockTable            ILockTableDo
	NftChainPlat         INftChainPlatDo
	NftCollection        INftCollectionDo
	NftOrder             INftOrderDo
	NftType              INftTypeDo
	NftUserAsset         INftUserAssetDo
	NftUserChainplat     INftUserChainplatDo
	NftUserReal          INftUserRealDo
	NftWork              INftWorkDo
	NftWorksHi           INftWorksHiDo
	NftWorksPrice        INftWorksPriceDo
	TArticle             ITArticleDo
	TAttachment          ITAttachmentDo
	TAuditlogHistory2019 ITAuditlogHistory2019Do
	TAuditlogHistory2020 ITAuditlogHistory2020Do
	TDicDatum            ITDicDatumDo
	TFwlogHistory2019    ITFwlogHistory2019Do
	TFwlogHistory2020    ITFwlogHistory2020Do
	TMenu                ITMenuDo
	TNotify              ITNotifyDo
	TOrg                 ITOrgDo
	TPermissionsLog      ITPermissionsLogDo
	TRole                ITRoleDo
	TRoleMenu            ITRoleMenuDo
	TRoleOrg             ITRoleOrgDo
	TTableindex          ITTableindexDo
	TUser                ITUserDo
	TUserFollow          ITUserFollowDo
	TUserOrg             ITUserOrgDo
	TUserPlatformInfo    ITUserPlatformInfoDo
	TUserRole            ITUserRoleDo
	UndoLog              IUndoLogDo
	WxCpconfig           IWxCpconfigDo
	WxMenu               IWxMenuDo
	WxMiniappconfig      IWxMiniappconfigDo
	WxMpconfig           IWxMpconfigDo
	WxPayconfig          IWxPayconfigDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AliPayconfig:         q.AliPayconfig.WithContext(ctx),
		BranchTable:          q.BranchTable.WithContext(ctx),
		GlobalTable:          q.GlobalTable.WithContext(ctx),
		LockTable:            q.LockTable.WithContext(ctx),
		NftChainPlat:         q.NftChainPlat.WithContext(ctx),
		NftCollection:        q.NftCollection.WithContext(ctx),
		NftOrder:             q.NftOrder.WithContext(ctx),
		NftType:              q.NftType.WithContext(ctx),
		NftUserAsset:         q.NftUserAsset.WithContext(ctx),
		NftUserChainplat:     q.NftUserChainplat.WithContext(ctx),
		NftUserReal:          q.NftUserReal.WithContext(ctx),
		NftWork:              q.NftWork.WithContext(ctx),
		NftWorksHi:           q.NftWorksHi.WithContext(ctx),
		NftWorksPrice:        q.NftWorksPrice.WithContext(ctx),
		TArticle:             q.TArticle.WithContext(ctx),
		TAttachment:          q.TAttachment.WithContext(ctx),
		TAuditlogHistory2019: q.TAuditlogHistory2019.WithContext(ctx),
		TAuditlogHistory2020: q.TAuditlogHistory2020.WithContext(ctx),
		TDicDatum:            q.TDicDatum.WithContext(ctx),
		TFwlogHistory2019:    q.TFwlogHistory2019.WithContext(ctx),
		TFwlogHistory2020:    q.TFwlogHistory2020.WithContext(ctx),
		TMenu:                q.TMenu.WithContext(ctx),
		TNotify:              q.TNotify.WithContext(ctx),
		TOrg:                 q.TOrg.WithContext(ctx),
		TPermissionsLog:      q.TPermissionsLog.WithContext(ctx),
		TRole:                q.TRole.WithContext(ctx),
		TRoleMenu:            q.TRoleMenu.WithContext(ctx),
		TRoleOrg:             q.TRoleOrg.WithContext(ctx),
		TTableindex:          q.TTableindex.WithContext(ctx),
		TUser:                q.TUser.WithContext(ctx),
		TUserFollow:          q.TUserFollow.WithContext(ctx),
		TUserOrg:             q.TUserOrg.WithContext(ctx),
		TUserPlatformInfo:    q.TUserPlatformInfo.WithContext(ctx),
		TUserRole:            q.TUserRole.WithContext(ctx),
		UndoLog:              q.UndoLog.WithContext(ctx),
		WxCpconfig:           q.WxCpconfig.WithContext(ctx),
		WxMenu:               q.WxMenu.WithContext(ctx),
		WxMiniappconfig:      q.WxMiniappconfig.WithContext(ctx),
		WxMpconfig:           q.WxMpconfig.WithContext(ctx),
		WxPayconfig:          q.WxPayconfig.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
