// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newBranchTable(db *gorm.DB) branchTable {
	_branchTable := branchTable{}

	_branchTable.branchTableDo.UseDB(db)
	_branchTable.branchTableDo.UseModel(&model.BranchTable{})

	tableName := _branchTable.branchTableDo.TableName()
	_branchTable.ALL = field.NewAsterisk(tableName)
	_branchTable.BranchID = field.NewInt64(tableName, "branch_id")
	_branchTable.Xid = field.NewString(tableName, "xid")
	_branchTable.TransactionID = field.NewInt64(tableName, "transaction_id")
	_branchTable.ResourceGroupID = field.NewString(tableName, "resource_group_id")
	_branchTable.ResourceID = field.NewString(tableName, "resource_id")
	_branchTable.BranchType = field.NewString(tableName, "branch_type")
	_branchTable.Status = field.NewInt64(tableName, "status")
	_branchTable.ClientID = field.NewString(tableName, "client_id")
	_branchTable.ApplicationData = field.NewString(tableName, "application_data")
	_branchTable.GmtCreate = field.NewTime(tableName, "gmt_create")
	_branchTable.GmtModified = field.NewTime(tableName, "gmt_modified")

	_branchTable.fillFieldMap()

	return _branchTable
}

type branchTable struct {
	branchTableDo branchTableDo

	ALL             field.Asterisk
	BranchID        field.Int64
	Xid             field.String
	TransactionID   field.Int64
	ResourceGroupID field.String
	ResourceID      field.String
	BranchType      field.String
	Status          field.Int64
	ClientID        field.String
	ApplicationData field.String
	GmtCreate       field.Time
	GmtModified     field.Time

	fieldMap map[string]field.Expr
}

func (b branchTable) Table(newTableName string) *branchTable {
	b.branchTableDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b branchTable) As(alias string) *branchTable {
	b.branchTableDo.DO = *(b.branchTableDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *branchTable) updateTableName(table string) *branchTable {
	b.ALL = field.NewAsterisk(table)
	b.BranchID = field.NewInt64(table, "branch_id")
	b.Xid = field.NewString(table, "xid")
	b.TransactionID = field.NewInt64(table, "transaction_id")
	b.ResourceGroupID = field.NewString(table, "resource_group_id")
	b.ResourceID = field.NewString(table, "resource_id")
	b.BranchType = field.NewString(table, "branch_type")
	b.Status = field.NewInt64(table, "status")
	b.ClientID = field.NewString(table, "client_id")
	b.ApplicationData = field.NewString(table, "application_data")
	b.GmtCreate = field.NewTime(table, "gmt_create")
	b.GmtModified = field.NewTime(table, "gmt_modified")

	b.fillFieldMap()

	return b
}

func (b *branchTable) WithContext(ctx context.Context) IBranchTableDo {
	return b.branchTableDo.WithContext(ctx)
}

func (b branchTable) TableName() string { return b.branchTableDo.TableName() }

func (b branchTable) Alias() string { return b.branchTableDo.Alias() }

func (b *branchTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *branchTable) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 11)
	b.fieldMap["branch_id"] = b.BranchID
	b.fieldMap["xid"] = b.Xid
	b.fieldMap["transaction_id"] = b.TransactionID
	b.fieldMap["resource_group_id"] = b.ResourceGroupID
	b.fieldMap["resource_id"] = b.ResourceID
	b.fieldMap["branch_type"] = b.BranchType
	b.fieldMap["status"] = b.Status
	b.fieldMap["client_id"] = b.ClientID
	b.fieldMap["application_data"] = b.ApplicationData
	b.fieldMap["gmt_create"] = b.GmtCreate
	b.fieldMap["gmt_modified"] = b.GmtModified
}

func (b branchTable) clone(db *gorm.DB) branchTable {
	b.branchTableDo.ReplaceDB(db)
	return b
}

type branchTableDo struct{ gen.DO }

type IBranchTableDo interface {
	gen.SubQuery
	Debug() IBranchTableDo
	WithContext(ctx context.Context) IBranchTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBranchTableDo
	Not(conds ...gen.Condition) IBranchTableDo
	Or(conds ...gen.Condition) IBranchTableDo
	Select(conds ...field.Expr) IBranchTableDo
	Where(conds ...gen.Condition) IBranchTableDo
	Order(conds ...field.Expr) IBranchTableDo
	Distinct(cols ...field.Expr) IBranchTableDo
	Omit(cols ...field.Expr) IBranchTableDo
	Join(table schema.Tabler, on ...field.Expr) IBranchTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBranchTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBranchTableDo
	Group(cols ...field.Expr) IBranchTableDo
	Having(conds ...gen.Condition) IBranchTableDo
	Limit(limit int) IBranchTableDo
	Offset(offset int) IBranchTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBranchTableDo
	Unscoped() IBranchTableDo
	Create(values ...*model.BranchTable) error
	CreateInBatches(values []*model.BranchTable, batchSize int) error
	Save(values ...*model.BranchTable) error
	First() (*model.BranchTable, error)
	Take() (*model.BranchTable, error)
	Last() (*model.BranchTable, error)
	Find() ([]*model.BranchTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BranchTable, err error)
	FindInBatches(result *[]*model.BranchTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BranchTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBranchTableDo
	Assign(attrs ...field.AssignExpr) IBranchTableDo
	Joins(fields ...field.RelationField) IBranchTableDo
	Preload(fields ...field.RelationField) IBranchTableDo
	FirstOrInit() (*model.BranchTable, error)
	FirstOrCreate() (*model.BranchTable, error)
	FindByPage(offset int, limit int) (result []*model.BranchTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBranchTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b branchTableDo) Debug() IBranchTableDo {
	return b.withDO(b.DO.Debug())
}

func (b branchTableDo) WithContext(ctx context.Context) IBranchTableDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b branchTableDo) ReadDB() IBranchTableDo {
	return b.Clauses(dbresolver.Read)
}

func (b branchTableDo) WriteDB() IBranchTableDo {
	return b.Clauses(dbresolver.Write)
}

func (b branchTableDo) Clauses(conds ...clause.Expression) IBranchTableDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b branchTableDo) Returning(value interface{}, columns ...string) IBranchTableDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b branchTableDo) Not(conds ...gen.Condition) IBranchTableDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b branchTableDo) Or(conds ...gen.Condition) IBranchTableDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b branchTableDo) Select(conds ...field.Expr) IBranchTableDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b branchTableDo) Where(conds ...gen.Condition) IBranchTableDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b branchTableDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBranchTableDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b branchTableDo) Order(conds ...field.Expr) IBranchTableDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b branchTableDo) Distinct(cols ...field.Expr) IBranchTableDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b branchTableDo) Omit(cols ...field.Expr) IBranchTableDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b branchTableDo) Join(table schema.Tabler, on ...field.Expr) IBranchTableDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b branchTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBranchTableDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b branchTableDo) RightJoin(table schema.Tabler, on ...field.Expr) IBranchTableDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b branchTableDo) Group(cols ...field.Expr) IBranchTableDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b branchTableDo) Having(conds ...gen.Condition) IBranchTableDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b branchTableDo) Limit(limit int) IBranchTableDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b branchTableDo) Offset(offset int) IBranchTableDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b branchTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBranchTableDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b branchTableDo) Unscoped() IBranchTableDo {
	return b.withDO(b.DO.Unscoped())
}

func (b branchTableDo) Create(values ...*model.BranchTable) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b branchTableDo) CreateInBatches(values []*model.BranchTable, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b branchTableDo) Save(values ...*model.BranchTable) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b branchTableDo) First() (*model.BranchTable, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BranchTable), nil
	}
}

func (b branchTableDo) Take() (*model.BranchTable, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BranchTable), nil
	}
}

func (b branchTableDo) Last() (*model.BranchTable, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BranchTable), nil
	}
}

func (b branchTableDo) Find() ([]*model.BranchTable, error) {
	result, err := b.DO.Find()
	return result.([]*model.BranchTable), err
}

func (b branchTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BranchTable, err error) {
	buf := make([]*model.BranchTable, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b branchTableDo) FindInBatches(result *[]*model.BranchTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b branchTableDo) Attrs(attrs ...field.AssignExpr) IBranchTableDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b branchTableDo) Assign(attrs ...field.AssignExpr) IBranchTableDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b branchTableDo) Joins(fields ...field.RelationField) IBranchTableDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b branchTableDo) Preload(fields ...field.RelationField) IBranchTableDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b branchTableDo) FirstOrInit() (*model.BranchTable, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BranchTable), nil
	}
}

func (b branchTableDo) FirstOrCreate() (*model.BranchTable, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BranchTable), nil
	}
}

func (b branchTableDo) FindByPage(offset int, limit int) (result []*model.BranchTable, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b branchTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b branchTableDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b branchTableDo) Delete(models ...*model.BranchTable) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *branchTableDo) withDO(do gen.Dao) *branchTableDo {
	b.DO = *do.(*gen.DO)
	return b
}
