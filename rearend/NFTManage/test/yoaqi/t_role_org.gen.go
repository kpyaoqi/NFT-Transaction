// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newTRoleOrg(db *gorm.DB) tRoleOrg {
	_tRoleOrg := tRoleOrg{}

	_tRoleOrg.tRoleOrgDo.UseDB(db)
	_tRoleOrg.tRoleOrgDo.UseModel(&model.TRoleOrg{})

	tableName := _tRoleOrg.tRoleOrgDo.TableName()
	_tRoleOrg.ALL = field.NewAsterisk(tableName)
	_tRoleOrg.ID = field.NewString(tableName, "id")
	_tRoleOrg.OrgID = field.NewString(tableName, "orgId")
	_tRoleOrg.RoleID = field.NewString(tableName, "roleId")
	_tRoleOrg.Children = field.NewInt64(tableName, "children")
	_tRoleOrg.CreateTime = field.NewTime(tableName, "createTime")
	_tRoleOrg.CreateUserID = field.NewString(tableName, "createUserId")
	_tRoleOrg.UpdateTime = field.NewTime(tableName, "updateTime")
	_tRoleOrg.UpdateUserID = field.NewString(tableName, "updateUserId")
	_tRoleOrg.Bak1 = field.NewString(tableName, "bak1")
	_tRoleOrg.Bak2 = field.NewString(tableName, "bak2")
	_tRoleOrg.Bak3 = field.NewString(tableName, "bak3")
	_tRoleOrg.Bak4 = field.NewString(tableName, "bak4")
	_tRoleOrg.Bak5 = field.NewString(tableName, "bak5")

	_tRoleOrg.fillFieldMap()

	return _tRoleOrg
}

type tRoleOrg struct {
	tRoleOrgDo tRoleOrgDo

	ALL          field.Asterisk
	ID           field.String // 编号
	OrgID        field.String // 部门编号
	RoleID       field.String // 角色编号
	Children     field.Int64  // 0不包含子部门,1包含.用于表示角色和部门的权限关系.用于记录roleOrgType的结果,缓存值
	CreateTime   field.Time
	CreateUserID field.String
	UpdateTime   field.Time
	UpdateUserID field.String
	Bak1         field.String
	Bak2         field.String
	Bak3         field.String
	Bak4         field.String
	Bak5         field.String

	fieldMap map[string]field.Expr
}

func (t tRoleOrg) Table(newTableName string) *tRoleOrg {
	t.tRoleOrgDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tRoleOrg) As(alias string) *tRoleOrg {
	t.tRoleOrgDo.DO = *(t.tRoleOrgDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tRoleOrg) updateTableName(table string) *tRoleOrg {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.OrgID = field.NewString(table, "orgId")
	t.RoleID = field.NewString(table, "roleId")
	t.Children = field.NewInt64(table, "children")
	t.CreateTime = field.NewTime(table, "createTime")
	t.CreateUserID = field.NewString(table, "createUserId")
	t.UpdateTime = field.NewTime(table, "updateTime")
	t.UpdateUserID = field.NewString(table, "updateUserId")
	t.Bak1 = field.NewString(table, "bak1")
	t.Bak2 = field.NewString(table, "bak2")
	t.Bak3 = field.NewString(table, "bak3")
	t.Bak4 = field.NewString(table, "bak4")
	t.Bak5 = field.NewString(table, "bak5")

	t.fillFieldMap()

	return t
}

func (t *tRoleOrg) WithContext(ctx context.Context) ITRoleOrgDo { return t.tRoleOrgDo.WithContext(ctx) }

func (t tRoleOrg) TableName() string { return t.tRoleOrgDo.TableName() }

func (t tRoleOrg) Alias() string { return t.tRoleOrgDo.Alias() }

func (t *tRoleOrg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tRoleOrg) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.ID
	t.fieldMap["orgId"] = t.OrgID
	t.fieldMap["roleId"] = t.RoleID
	t.fieldMap["children"] = t.Children
	t.fieldMap["createTime"] = t.CreateTime
	t.fieldMap["createUserId"] = t.CreateUserID
	t.fieldMap["updateTime"] = t.UpdateTime
	t.fieldMap["updateUserId"] = t.UpdateUserID
	t.fieldMap["bak1"] = t.Bak1
	t.fieldMap["bak2"] = t.Bak2
	t.fieldMap["bak3"] = t.Bak3
	t.fieldMap["bak4"] = t.Bak4
	t.fieldMap["bak5"] = t.Bak5
}

func (t tRoleOrg) clone(db *gorm.DB) tRoleOrg {
	t.tRoleOrgDo.ReplaceDB(db)
	return t
}

type tRoleOrgDo struct{ gen.DO }

type ITRoleOrgDo interface {
	gen.SubQuery
	Debug() ITRoleOrgDo
	WithContext(ctx context.Context) ITRoleOrgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITRoleOrgDo
	Not(conds ...gen.Condition) ITRoleOrgDo
	Or(conds ...gen.Condition) ITRoleOrgDo
	Select(conds ...field.Expr) ITRoleOrgDo
	Where(conds ...gen.Condition) ITRoleOrgDo
	Order(conds ...field.Expr) ITRoleOrgDo
	Distinct(cols ...field.Expr) ITRoleOrgDo
	Omit(cols ...field.Expr) ITRoleOrgDo
	Join(table schema.Tabler, on ...field.Expr) ITRoleOrgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITRoleOrgDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITRoleOrgDo
	Group(cols ...field.Expr) ITRoleOrgDo
	Having(conds ...gen.Condition) ITRoleOrgDo
	Limit(limit int) ITRoleOrgDo
	Offset(offset int) ITRoleOrgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITRoleOrgDo
	Unscoped() ITRoleOrgDo
	Create(values ...*model.TRoleOrg) error
	CreateInBatches(values []*model.TRoleOrg, batchSize int) error
	Save(values ...*model.TRoleOrg) error
	First() (*model.TRoleOrg, error)
	Take() (*model.TRoleOrg, error)
	Last() (*model.TRoleOrg, error)
	Find() ([]*model.TRoleOrg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRoleOrg, err error)
	FindInBatches(result *[]*model.TRoleOrg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TRoleOrg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITRoleOrgDo
	Assign(attrs ...field.AssignExpr) ITRoleOrgDo
	Joins(fields ...field.RelationField) ITRoleOrgDo
	Preload(fields ...field.RelationField) ITRoleOrgDo
	FirstOrInit() (*model.TRoleOrg, error)
	FirstOrCreate() (*model.TRoleOrg, error)
	FindByPage(offset int, limit int) (result []*model.TRoleOrg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITRoleOrgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tRoleOrgDo) Debug() ITRoleOrgDo {
	return t.withDO(t.DO.Debug())
}

func (t tRoleOrgDo) WithContext(ctx context.Context) ITRoleOrgDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tRoleOrgDo) ReadDB() ITRoleOrgDo {
	return t.Clauses(dbresolver.Read)
}

func (t tRoleOrgDo) WriteDB() ITRoleOrgDo {
	return t.Clauses(dbresolver.Write)
}

func (t tRoleOrgDo) Clauses(conds ...clause.Expression) ITRoleOrgDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tRoleOrgDo) Returning(value interface{}, columns ...string) ITRoleOrgDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tRoleOrgDo) Not(conds ...gen.Condition) ITRoleOrgDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tRoleOrgDo) Or(conds ...gen.Condition) ITRoleOrgDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tRoleOrgDo) Select(conds ...field.Expr) ITRoleOrgDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tRoleOrgDo) Where(conds ...gen.Condition) ITRoleOrgDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tRoleOrgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITRoleOrgDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tRoleOrgDo) Order(conds ...field.Expr) ITRoleOrgDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tRoleOrgDo) Distinct(cols ...field.Expr) ITRoleOrgDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tRoleOrgDo) Omit(cols ...field.Expr) ITRoleOrgDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tRoleOrgDo) Join(table schema.Tabler, on ...field.Expr) ITRoleOrgDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tRoleOrgDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITRoleOrgDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tRoleOrgDo) RightJoin(table schema.Tabler, on ...field.Expr) ITRoleOrgDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tRoleOrgDo) Group(cols ...field.Expr) ITRoleOrgDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tRoleOrgDo) Having(conds ...gen.Condition) ITRoleOrgDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tRoleOrgDo) Limit(limit int) ITRoleOrgDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tRoleOrgDo) Offset(offset int) ITRoleOrgDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tRoleOrgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITRoleOrgDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tRoleOrgDo) Unscoped() ITRoleOrgDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tRoleOrgDo) Create(values ...*model.TRoleOrg) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tRoleOrgDo) CreateInBatches(values []*model.TRoleOrg, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tRoleOrgDo) Save(values ...*model.TRoleOrg) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tRoleOrgDo) First() (*model.TRoleOrg, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoleOrg), nil
	}
}

func (t tRoleOrgDo) Take() (*model.TRoleOrg, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoleOrg), nil
	}
}

func (t tRoleOrgDo) Last() (*model.TRoleOrg, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoleOrg), nil
	}
}

func (t tRoleOrgDo) Find() ([]*model.TRoleOrg, error) {
	result, err := t.DO.Find()
	return result.([]*model.TRoleOrg), err
}

func (t tRoleOrgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRoleOrg, err error) {
	buf := make([]*model.TRoleOrg, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tRoleOrgDo) FindInBatches(result *[]*model.TRoleOrg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tRoleOrgDo) Attrs(attrs ...field.AssignExpr) ITRoleOrgDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tRoleOrgDo) Assign(attrs ...field.AssignExpr) ITRoleOrgDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tRoleOrgDo) Joins(fields ...field.RelationField) ITRoleOrgDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tRoleOrgDo) Preload(fields ...field.RelationField) ITRoleOrgDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tRoleOrgDo) FirstOrInit() (*model.TRoleOrg, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoleOrg), nil
	}
}

func (t tRoleOrgDo) FirstOrCreate() (*model.TRoleOrg, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRoleOrg), nil
	}
}

func (t tRoleOrgDo) FindByPage(offset int, limit int) (result []*model.TRoleOrg, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tRoleOrgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tRoleOrgDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tRoleOrgDo) Delete(models ...*model.TRoleOrg) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tRoleOrgDo) withDO(do gen.Dao) *tRoleOrgDo {
	t.DO = *do.(*gen.DO)
	return t
}
