// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newTNotify(db *gorm.DB) tNotify {
	_tNotify := tNotify{}

	_tNotify.tNotifyDo.UseDB(db)
	_tNotify.tNotifyDo.UseModel(&model.TNotify{})

	tableName := _tNotify.tNotifyDo.TableName()
	_tNotify.ALL = field.NewAsterisk(tableName)
	_tNotify.ID = field.NewString(tableName, "id")
	_tNotify.NodifyID = field.NewString(tableName, "nodifyId")
	_tNotify.NodifyTime = field.NewTime(tableName, "nodifyTime")
	_tNotify.AcceptID = field.NewString(tableName, "acceptId")
	_tNotify.AcceptTime = field.NewTime(tableName, "acceptTime")
	_tNotify.Title = field.NewString(tableName, "title")
	_tNotify.Content = field.NewString(tableName, "content")
	_tNotify.Status = field.NewInt64(tableName, "status")
	_tNotify.Type = field.NewInt64(tableName, "type")
	_tNotify.URL = field.NewString(tableName, "url")

	_tNotify.fillFieldMap()

	return _tNotify
}

type tNotify struct {
	tNotifyDo tNotifyDo

	ALL        field.Asterisk
	ID         field.String // 主键
	NodifyID   field.String // 通知者
	NodifyTime field.Time   // 通知时间
	AcceptID   field.String // 接受者
	AcceptTime field.Time   // 接受时间(查看时间)
	Title      field.String // 消息标题
	Content    field.String // 消息内容
	Status     field.Int64  // 消息状态(0未读,1已读)
	Type       field.Int64  // 消息类型(1系统运行通知,2推广消息)
	URL        field.String // 推广消息跳转的链接

	fieldMap map[string]field.Expr
}

func (t tNotify) Table(newTableName string) *tNotify {
	t.tNotifyDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tNotify) As(alias string) *tNotify {
	t.tNotifyDo.DO = *(t.tNotifyDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tNotify) updateTableName(table string) *tNotify {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.NodifyID = field.NewString(table, "nodifyId")
	t.NodifyTime = field.NewTime(table, "nodifyTime")
	t.AcceptID = field.NewString(table, "acceptId")
	t.AcceptTime = field.NewTime(table, "acceptTime")
	t.Title = field.NewString(table, "title")
	t.Content = field.NewString(table, "content")
	t.Status = field.NewInt64(table, "status")
	t.Type = field.NewInt64(table, "type")
	t.URL = field.NewString(table, "url")

	t.fillFieldMap()

	return t
}

func (t *tNotify) WithContext(ctx context.Context) ITNotifyDo { return t.tNotifyDo.WithContext(ctx) }

func (t tNotify) TableName() string { return t.tNotifyDo.TableName() }

func (t tNotify) Alias() string { return t.tNotifyDo.Alias() }

func (t *tNotify) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tNotify) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["nodifyId"] = t.NodifyID
	t.fieldMap["nodifyTime"] = t.NodifyTime
	t.fieldMap["acceptId"] = t.AcceptID
	t.fieldMap["acceptTime"] = t.AcceptTime
	t.fieldMap["title"] = t.Title
	t.fieldMap["content"] = t.Content
	t.fieldMap["status"] = t.Status
	t.fieldMap["type"] = t.Type
	t.fieldMap["url"] = t.URL
}

func (t tNotify) clone(db *gorm.DB) tNotify {
	t.tNotifyDo.ReplaceDB(db)
	return t
}

type tNotifyDo struct{ gen.DO }

type ITNotifyDo interface {
	gen.SubQuery
	Debug() ITNotifyDo
	WithContext(ctx context.Context) ITNotifyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITNotifyDo
	Not(conds ...gen.Condition) ITNotifyDo
	Or(conds ...gen.Condition) ITNotifyDo
	Select(conds ...field.Expr) ITNotifyDo
	Where(conds ...gen.Condition) ITNotifyDo
	Order(conds ...field.Expr) ITNotifyDo
	Distinct(cols ...field.Expr) ITNotifyDo
	Omit(cols ...field.Expr) ITNotifyDo
	Join(table schema.Tabler, on ...field.Expr) ITNotifyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITNotifyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITNotifyDo
	Group(cols ...field.Expr) ITNotifyDo
	Having(conds ...gen.Condition) ITNotifyDo
	Limit(limit int) ITNotifyDo
	Offset(offset int) ITNotifyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITNotifyDo
	Unscoped() ITNotifyDo
	Create(values ...*model.TNotify) error
	CreateInBatches(values []*model.TNotify, batchSize int) error
	Save(values ...*model.TNotify) error
	First() (*model.TNotify, error)
	Take() (*model.TNotify, error)
	Last() (*model.TNotify, error)
	Find() ([]*model.TNotify, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNotify, err error)
	FindInBatches(result *[]*model.TNotify, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TNotify) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITNotifyDo
	Assign(attrs ...field.AssignExpr) ITNotifyDo
	Joins(fields ...field.RelationField) ITNotifyDo
	Preload(fields ...field.RelationField) ITNotifyDo
	FirstOrInit() (*model.TNotify, error)
	FirstOrCreate() (*model.TNotify, error)
	FindByPage(offset int, limit int) (result []*model.TNotify, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITNotifyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tNotifyDo) Debug() ITNotifyDo {
	return t.withDO(t.DO.Debug())
}

func (t tNotifyDo) WithContext(ctx context.Context) ITNotifyDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tNotifyDo) ReadDB() ITNotifyDo {
	return t.Clauses(dbresolver.Read)
}

func (t tNotifyDo) WriteDB() ITNotifyDo {
	return t.Clauses(dbresolver.Write)
}

func (t tNotifyDo) Clauses(conds ...clause.Expression) ITNotifyDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tNotifyDo) Returning(value interface{}, columns ...string) ITNotifyDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tNotifyDo) Not(conds ...gen.Condition) ITNotifyDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tNotifyDo) Or(conds ...gen.Condition) ITNotifyDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tNotifyDo) Select(conds ...field.Expr) ITNotifyDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tNotifyDo) Where(conds ...gen.Condition) ITNotifyDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tNotifyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITNotifyDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tNotifyDo) Order(conds ...field.Expr) ITNotifyDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tNotifyDo) Distinct(cols ...field.Expr) ITNotifyDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tNotifyDo) Omit(cols ...field.Expr) ITNotifyDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tNotifyDo) Join(table schema.Tabler, on ...field.Expr) ITNotifyDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tNotifyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITNotifyDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tNotifyDo) RightJoin(table schema.Tabler, on ...field.Expr) ITNotifyDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tNotifyDo) Group(cols ...field.Expr) ITNotifyDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tNotifyDo) Having(conds ...gen.Condition) ITNotifyDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tNotifyDo) Limit(limit int) ITNotifyDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tNotifyDo) Offset(offset int) ITNotifyDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tNotifyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITNotifyDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tNotifyDo) Unscoped() ITNotifyDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tNotifyDo) Create(values ...*model.TNotify) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tNotifyDo) CreateInBatches(values []*model.TNotify, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tNotifyDo) Save(values ...*model.TNotify) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tNotifyDo) First() (*model.TNotify, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNotify), nil
	}
}

func (t tNotifyDo) Take() (*model.TNotify, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNotify), nil
	}
}

func (t tNotifyDo) Last() (*model.TNotify, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNotify), nil
	}
}

func (t tNotifyDo) Find() ([]*model.TNotify, error) {
	result, err := t.DO.Find()
	return result.([]*model.TNotify), err
}

func (t tNotifyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNotify, err error) {
	buf := make([]*model.TNotify, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tNotifyDo) FindInBatches(result *[]*model.TNotify, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tNotifyDo) Attrs(attrs ...field.AssignExpr) ITNotifyDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tNotifyDo) Assign(attrs ...field.AssignExpr) ITNotifyDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tNotifyDo) Joins(fields ...field.RelationField) ITNotifyDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tNotifyDo) Preload(fields ...field.RelationField) ITNotifyDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tNotifyDo) FirstOrInit() (*model.TNotify, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNotify), nil
	}
}

func (t tNotifyDo) FirstOrCreate() (*model.TNotify, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNotify), nil
	}
}

func (t tNotifyDo) FindByPage(offset int, limit int) (result []*model.TNotify, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tNotifyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tNotifyDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tNotifyDo) Delete(models ...*model.TNotify) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tNotifyDo) withDO(do gen.Dao) *tNotifyDo {
	t.DO = *do.(*gen.DO)
	return t
}
