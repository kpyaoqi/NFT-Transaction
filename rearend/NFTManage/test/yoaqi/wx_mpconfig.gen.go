// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newWxMpconfig(db *gorm.DB) wxMpconfig {
	_wxMpconfig := wxMpconfig{}

	_wxMpconfig.wxMpconfigDo.UseDB(db)
	_wxMpconfig.wxMpconfigDo.UseModel(&model.WxMpconfig{})

	tableName := _wxMpconfig.wxMpconfigDo.TableName()
	_wxMpconfig.ALL = field.NewAsterisk(tableName)
	_wxMpconfig.ID = field.NewString(tableName, "id")
	_wxMpconfig.OrgID = field.NewString(tableName, "orgId")
	_wxMpconfig.AppID = field.NewString(tableName, "appId")
	_wxMpconfig.Secret = field.NewString(tableName, "secret")
	_wxMpconfig.Token = field.NewString(tableName, "token")
	_wxMpconfig.AesKey = field.NewString(tableName, "aesKey")
	_wxMpconfig.WxOriginalID = field.NewString(tableName, "wxOriginalId")
	_wxMpconfig.Oauth2 = field.NewInt64(tableName, "oauth2")
	_wxMpconfig.Active = field.NewInt64(tableName, "active")
	_wxMpconfig.Bak1 = field.NewString(tableName, "bak1")
	_wxMpconfig.Bak2 = field.NewString(tableName, "bak2")
	_wxMpconfig.Bak3 = field.NewString(tableName, "bak3")
	_wxMpconfig.Bak4 = field.NewString(tableName, "bak4")
	_wxMpconfig.Bak5 = field.NewString(tableName, "bak5")

	_wxMpconfig.fillFieldMap()

	return _wxMpconfig
}

type wxMpconfig struct {
	wxMpconfigDo wxMpconfigDo

	ALL          field.Asterisk
	ID           field.String
	OrgID        field.String // 站点Id
	AppID        field.String // 开发者Id
	Secret       field.String // 应用密钥
	Token        field.String // 开发者令牌
	AesKey       field.String // 消息加解密密钥
	WxOriginalID field.String // 微信原始ID
	Oauth2       field.Int64  // 是否支持微信oauth2.0协议,0是不支持,1是支持
	Active       field.Int64  // 状态 0不可用,1可用
	Bak1         field.String
	Bak2         field.String
	Bak3         field.String
	Bak4         field.String
	Bak5         field.String

	fieldMap map[string]field.Expr
}

func (w wxMpconfig) Table(newTableName string) *wxMpconfig {
	w.wxMpconfigDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wxMpconfig) As(alias string) *wxMpconfig {
	w.wxMpconfigDo.DO = *(w.wxMpconfigDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wxMpconfig) updateTableName(table string) *wxMpconfig {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewString(table, "id")
	w.OrgID = field.NewString(table, "orgId")
	w.AppID = field.NewString(table, "appId")
	w.Secret = field.NewString(table, "secret")
	w.Token = field.NewString(table, "token")
	w.AesKey = field.NewString(table, "aesKey")
	w.WxOriginalID = field.NewString(table, "wxOriginalId")
	w.Oauth2 = field.NewInt64(table, "oauth2")
	w.Active = field.NewInt64(table, "active")
	w.Bak1 = field.NewString(table, "bak1")
	w.Bak2 = field.NewString(table, "bak2")
	w.Bak3 = field.NewString(table, "bak3")
	w.Bak4 = field.NewString(table, "bak4")
	w.Bak5 = field.NewString(table, "bak5")

	w.fillFieldMap()

	return w
}

func (w *wxMpconfig) WithContext(ctx context.Context) IWxMpconfigDo {
	return w.wxMpconfigDo.WithContext(ctx)
}

func (w wxMpconfig) TableName() string { return w.wxMpconfigDo.TableName() }

func (w wxMpconfig) Alias() string { return w.wxMpconfigDo.Alias() }

func (w *wxMpconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wxMpconfig) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 14)
	w.fieldMap["id"] = w.ID
	w.fieldMap["orgId"] = w.OrgID
	w.fieldMap["appId"] = w.AppID
	w.fieldMap["secret"] = w.Secret
	w.fieldMap["token"] = w.Token
	w.fieldMap["aesKey"] = w.AesKey
	w.fieldMap["wxOriginalId"] = w.WxOriginalID
	w.fieldMap["oauth2"] = w.Oauth2
	w.fieldMap["active"] = w.Active
	w.fieldMap["bak1"] = w.Bak1
	w.fieldMap["bak2"] = w.Bak2
	w.fieldMap["bak3"] = w.Bak3
	w.fieldMap["bak4"] = w.Bak4
	w.fieldMap["bak5"] = w.Bak5
}

func (w wxMpconfig) clone(db *gorm.DB) wxMpconfig {
	w.wxMpconfigDo.ReplaceDB(db)
	return w
}

type wxMpconfigDo struct{ gen.DO }

type IWxMpconfigDo interface {
	gen.SubQuery
	Debug() IWxMpconfigDo
	WithContext(ctx context.Context) IWxMpconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWxMpconfigDo
	Not(conds ...gen.Condition) IWxMpconfigDo
	Or(conds ...gen.Condition) IWxMpconfigDo
	Select(conds ...field.Expr) IWxMpconfigDo
	Where(conds ...gen.Condition) IWxMpconfigDo
	Order(conds ...field.Expr) IWxMpconfigDo
	Distinct(cols ...field.Expr) IWxMpconfigDo
	Omit(cols ...field.Expr) IWxMpconfigDo
	Join(table schema.Tabler, on ...field.Expr) IWxMpconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWxMpconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWxMpconfigDo
	Group(cols ...field.Expr) IWxMpconfigDo
	Having(conds ...gen.Condition) IWxMpconfigDo
	Limit(limit int) IWxMpconfigDo
	Offset(offset int) IWxMpconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWxMpconfigDo
	Unscoped() IWxMpconfigDo
	Create(values ...*model.WxMpconfig) error
	CreateInBatches(values []*model.WxMpconfig, batchSize int) error
	Save(values ...*model.WxMpconfig) error
	First() (*model.WxMpconfig, error)
	Take() (*model.WxMpconfig, error)
	Last() (*model.WxMpconfig, error)
	Find() ([]*model.WxMpconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxMpconfig, err error)
	FindInBatches(result *[]*model.WxMpconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WxMpconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWxMpconfigDo
	Assign(attrs ...field.AssignExpr) IWxMpconfigDo
	Joins(fields ...field.RelationField) IWxMpconfigDo
	Preload(fields ...field.RelationField) IWxMpconfigDo
	FirstOrInit() (*model.WxMpconfig, error)
	FirstOrCreate() (*model.WxMpconfig, error)
	FindByPage(offset int, limit int) (result []*model.WxMpconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWxMpconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wxMpconfigDo) Debug() IWxMpconfigDo {
	return w.withDO(w.DO.Debug())
}

func (w wxMpconfigDo) WithContext(ctx context.Context) IWxMpconfigDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wxMpconfigDo) ReadDB() IWxMpconfigDo {
	return w.Clauses(dbresolver.Read)
}

func (w wxMpconfigDo) WriteDB() IWxMpconfigDo {
	return w.Clauses(dbresolver.Write)
}

func (w wxMpconfigDo) Clauses(conds ...clause.Expression) IWxMpconfigDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wxMpconfigDo) Returning(value interface{}, columns ...string) IWxMpconfigDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wxMpconfigDo) Not(conds ...gen.Condition) IWxMpconfigDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wxMpconfigDo) Or(conds ...gen.Condition) IWxMpconfigDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wxMpconfigDo) Select(conds ...field.Expr) IWxMpconfigDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wxMpconfigDo) Where(conds ...gen.Condition) IWxMpconfigDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wxMpconfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWxMpconfigDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wxMpconfigDo) Order(conds ...field.Expr) IWxMpconfigDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wxMpconfigDo) Distinct(cols ...field.Expr) IWxMpconfigDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wxMpconfigDo) Omit(cols ...field.Expr) IWxMpconfigDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wxMpconfigDo) Join(table schema.Tabler, on ...field.Expr) IWxMpconfigDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wxMpconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWxMpconfigDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wxMpconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IWxMpconfigDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wxMpconfigDo) Group(cols ...field.Expr) IWxMpconfigDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wxMpconfigDo) Having(conds ...gen.Condition) IWxMpconfigDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wxMpconfigDo) Limit(limit int) IWxMpconfigDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wxMpconfigDo) Offset(offset int) IWxMpconfigDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wxMpconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWxMpconfigDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wxMpconfigDo) Unscoped() IWxMpconfigDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wxMpconfigDo) Create(values ...*model.WxMpconfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wxMpconfigDo) CreateInBatches(values []*model.WxMpconfig, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wxMpconfigDo) Save(values ...*model.WxMpconfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wxMpconfigDo) First() (*model.WxMpconfig, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMpconfig), nil
	}
}

func (w wxMpconfigDo) Take() (*model.WxMpconfig, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMpconfig), nil
	}
}

func (w wxMpconfigDo) Last() (*model.WxMpconfig, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMpconfig), nil
	}
}

func (w wxMpconfigDo) Find() ([]*model.WxMpconfig, error) {
	result, err := w.DO.Find()
	return result.([]*model.WxMpconfig), err
}

func (w wxMpconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxMpconfig, err error) {
	buf := make([]*model.WxMpconfig, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wxMpconfigDo) FindInBatches(result *[]*model.WxMpconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wxMpconfigDo) Attrs(attrs ...field.AssignExpr) IWxMpconfigDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wxMpconfigDo) Assign(attrs ...field.AssignExpr) IWxMpconfigDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wxMpconfigDo) Joins(fields ...field.RelationField) IWxMpconfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wxMpconfigDo) Preload(fields ...field.RelationField) IWxMpconfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wxMpconfigDo) FirstOrInit() (*model.WxMpconfig, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMpconfig), nil
	}
}

func (w wxMpconfigDo) FirstOrCreate() (*model.WxMpconfig, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMpconfig), nil
	}
}

func (w wxMpconfigDo) FindByPage(offset int, limit int) (result []*model.WxMpconfig, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wxMpconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wxMpconfigDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wxMpconfigDo) Delete(models ...*model.WxMpconfig) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wxMpconfigDo) withDO(do gen.Dao) *wxMpconfigDo {
	w.DO = *do.(*gen.DO)
	return w
}
