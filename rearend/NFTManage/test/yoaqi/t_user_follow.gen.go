// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newTUserFollow(db *gorm.DB) tUserFollow {
	_tUserFollow := tUserFollow{}

	_tUserFollow.tUserFollowDo.UseDB(db)
	_tUserFollow.tUserFollowDo.UseModel(&model.TUserFollow{})

	tableName := _tUserFollow.tUserFollowDo.TableName()
	_tUserFollow.ALL = field.NewAsterisk(tableName)
	_tUserFollow.ID = field.NewString(tableName, "id")
	_tUserFollow.UserID = field.NewString(tableName, "userId")
	_tUserFollow.WorksID = field.NewString(tableName, "worksId")
	_tUserFollow.CreateTime = field.NewTime(tableName, "createTime")
	_tUserFollow.UpdateTime = field.NewTime(tableName, "updateTime")
	_tUserFollow.IsValid = field.NewInt64(tableName, "isValid")

	_tUserFollow.fillFieldMap()

	return _tUserFollow
}

type tUserFollow struct {
	tUserFollowDo tUserFollowDo

	ALL        field.Asterisk
	ID         field.String
	UserID     field.String
	WorksID    field.String
	CreateTime field.Time
	UpdateTime field.Time
	IsValid    field.Int64 // 用户收藏状态，0表示用户取消收藏，1表示正在收藏

	fieldMap map[string]field.Expr
}

func (t tUserFollow) Table(newTableName string) *tUserFollow {
	t.tUserFollowDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUserFollow) As(alias string) *tUserFollow {
	t.tUserFollowDo.DO = *(t.tUserFollowDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUserFollow) updateTableName(table string) *tUserFollow {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.UserID = field.NewString(table, "userId")
	t.WorksID = field.NewString(table, "worksId")
	t.CreateTime = field.NewTime(table, "createTime")
	t.UpdateTime = field.NewTime(table, "updateTime")
	t.IsValid = field.NewInt64(table, "isValid")

	t.fillFieldMap()

	return t
}

func (t *tUserFollow) WithContext(ctx context.Context) ITUserFollowDo {
	return t.tUserFollowDo.WithContext(ctx)
}

func (t tUserFollow) TableName() string { return t.tUserFollowDo.TableName() }

func (t tUserFollow) Alias() string { return t.tUserFollowDo.Alias() }

func (t *tUserFollow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUserFollow) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["userId"] = t.UserID
	t.fieldMap["worksId"] = t.WorksID
	t.fieldMap["createTime"] = t.CreateTime
	t.fieldMap["updateTime"] = t.UpdateTime
	t.fieldMap["isValid"] = t.IsValid
}

func (t tUserFollow) clone(db *gorm.DB) tUserFollow {
	t.tUserFollowDo.ReplaceDB(db)
	return t
}

type tUserFollowDo struct{ gen.DO }

type ITUserFollowDo interface {
	gen.SubQuery
	Debug() ITUserFollowDo
	WithContext(ctx context.Context) ITUserFollowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITUserFollowDo
	Not(conds ...gen.Condition) ITUserFollowDo
	Or(conds ...gen.Condition) ITUserFollowDo
	Select(conds ...field.Expr) ITUserFollowDo
	Where(conds ...gen.Condition) ITUserFollowDo
	Order(conds ...field.Expr) ITUserFollowDo
	Distinct(cols ...field.Expr) ITUserFollowDo
	Omit(cols ...field.Expr) ITUserFollowDo
	Join(table schema.Tabler, on ...field.Expr) ITUserFollowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITUserFollowDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITUserFollowDo
	Group(cols ...field.Expr) ITUserFollowDo
	Having(conds ...gen.Condition) ITUserFollowDo
	Limit(limit int) ITUserFollowDo
	Offset(offset int) ITUserFollowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITUserFollowDo
	Unscoped() ITUserFollowDo
	Create(values ...*model.TUserFollow) error
	CreateInBatches(values []*model.TUserFollow, batchSize int) error
	Save(values ...*model.TUserFollow) error
	First() (*model.TUserFollow, error)
	Take() (*model.TUserFollow, error)
	Last() (*model.TUserFollow, error)
	Find() ([]*model.TUserFollow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUserFollow, err error)
	FindInBatches(result *[]*model.TUserFollow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TUserFollow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITUserFollowDo
	Assign(attrs ...field.AssignExpr) ITUserFollowDo
	Joins(fields ...field.RelationField) ITUserFollowDo
	Preload(fields ...field.RelationField) ITUserFollowDo
	FirstOrInit() (*model.TUserFollow, error)
	FirstOrCreate() (*model.TUserFollow, error)
	FindByPage(offset int, limit int) (result []*model.TUserFollow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITUserFollowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tUserFollowDo) Debug() ITUserFollowDo {
	return t.withDO(t.DO.Debug())
}

func (t tUserFollowDo) WithContext(ctx context.Context) ITUserFollowDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUserFollowDo) ReadDB() ITUserFollowDo {
	return t.Clauses(dbresolver.Read)
}

func (t tUserFollowDo) WriteDB() ITUserFollowDo {
	return t.Clauses(dbresolver.Write)
}

func (t tUserFollowDo) Clauses(conds ...clause.Expression) ITUserFollowDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUserFollowDo) Returning(value interface{}, columns ...string) ITUserFollowDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUserFollowDo) Not(conds ...gen.Condition) ITUserFollowDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUserFollowDo) Or(conds ...gen.Condition) ITUserFollowDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUserFollowDo) Select(conds ...field.Expr) ITUserFollowDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUserFollowDo) Where(conds ...gen.Condition) ITUserFollowDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUserFollowDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITUserFollowDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUserFollowDo) Order(conds ...field.Expr) ITUserFollowDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUserFollowDo) Distinct(cols ...field.Expr) ITUserFollowDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUserFollowDo) Omit(cols ...field.Expr) ITUserFollowDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUserFollowDo) Join(table schema.Tabler, on ...field.Expr) ITUserFollowDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUserFollowDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITUserFollowDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUserFollowDo) RightJoin(table schema.Tabler, on ...field.Expr) ITUserFollowDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUserFollowDo) Group(cols ...field.Expr) ITUserFollowDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUserFollowDo) Having(conds ...gen.Condition) ITUserFollowDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUserFollowDo) Limit(limit int) ITUserFollowDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUserFollowDo) Offset(offset int) ITUserFollowDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUserFollowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITUserFollowDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUserFollowDo) Unscoped() ITUserFollowDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUserFollowDo) Create(values ...*model.TUserFollow) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUserFollowDo) CreateInBatches(values []*model.TUserFollow, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUserFollowDo) Save(values ...*model.TUserFollow) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUserFollowDo) First() (*model.TUserFollow, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserFollow), nil
	}
}

func (t tUserFollowDo) Take() (*model.TUserFollow, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserFollow), nil
	}
}

func (t tUserFollowDo) Last() (*model.TUserFollow, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserFollow), nil
	}
}

func (t tUserFollowDo) Find() ([]*model.TUserFollow, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUserFollow), err
}

func (t tUserFollowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUserFollow, err error) {
	buf := make([]*model.TUserFollow, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUserFollowDo) FindInBatches(result *[]*model.TUserFollow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUserFollowDo) Attrs(attrs ...field.AssignExpr) ITUserFollowDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUserFollowDo) Assign(attrs ...field.AssignExpr) ITUserFollowDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUserFollowDo) Joins(fields ...field.RelationField) ITUserFollowDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tUserFollowDo) Preload(fields ...field.RelationField) ITUserFollowDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tUserFollowDo) FirstOrInit() (*model.TUserFollow, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserFollow), nil
	}
}

func (t tUserFollowDo) FirstOrCreate() (*model.TUserFollow, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserFollow), nil
	}
}

func (t tUserFollowDo) FindByPage(offset int, limit int) (result []*model.TUserFollow, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUserFollowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tUserFollowDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tUserFollowDo) Delete(models ...*model.TUserFollow) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tUserFollowDo) withDO(do gen.Dao) *tUserFollowDo {
	t.DO = *do.(*gen.DO)
	return t
}
