// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newUndoLog(db *gorm.DB) undoLog {
	_undoLog := undoLog{}

	_undoLog.undoLogDo.UseDB(db)
	_undoLog.undoLogDo.UseModel(&model.UndoLog{})

	tableName := _undoLog.undoLogDo.TableName()
	_undoLog.ALL = field.NewAsterisk(tableName)
	_undoLog.ID = field.NewInt64(tableName, "id")
	_undoLog.BranchID = field.NewInt64(tableName, "branch_id")
	_undoLog.Xid = field.NewString(tableName, "xid")
	_undoLog.Context = field.NewString(tableName, "context")
	_undoLog.RollbackInfo = field.NewBytes(tableName, "rollback_info")
	_undoLog.LogStatus = field.NewInt64(tableName, "log_status")
	_undoLog.LogCreated = field.NewTime(tableName, "log_created")
	_undoLog.LogModified = field.NewTime(tableName, "log_modified")

	_undoLog.fillFieldMap()

	return _undoLog
}

type undoLog struct {
	undoLogDo undoLogDo

	ALL          field.Asterisk
	ID           field.Int64  // increment id
	BranchID     field.Int64  // branch transaction id
	Xid          field.String // global transaction id
	Context      field.String // undo_log context,such as serialization
	RollbackInfo field.Bytes  // rollback info
	LogStatus    field.Int64  // 0:normal status,1:defense status
	LogCreated   field.Time   // create datetime
	LogModified  field.Time   // modify datetime

	fieldMap map[string]field.Expr
}

func (u undoLog) Table(newTableName string) *undoLog {
	u.undoLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u undoLog) As(alias string) *undoLog {
	u.undoLogDo.DO = *(u.undoLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *undoLog) updateTableName(table string) *undoLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.BranchID = field.NewInt64(table, "branch_id")
	u.Xid = field.NewString(table, "xid")
	u.Context = field.NewString(table, "context")
	u.RollbackInfo = field.NewBytes(table, "rollback_info")
	u.LogStatus = field.NewInt64(table, "log_status")
	u.LogCreated = field.NewTime(table, "log_created")
	u.LogModified = field.NewTime(table, "log_modified")

	u.fillFieldMap()

	return u
}

func (u *undoLog) WithContext(ctx context.Context) IUndoLogDo { return u.undoLogDo.WithContext(ctx) }

func (u undoLog) TableName() string { return u.undoLogDo.TableName() }

func (u undoLog) Alias() string { return u.undoLogDo.Alias() }

func (u *undoLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *undoLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["branch_id"] = u.BranchID
	u.fieldMap["xid"] = u.Xid
	u.fieldMap["context"] = u.Context
	u.fieldMap["rollback_info"] = u.RollbackInfo
	u.fieldMap["log_status"] = u.LogStatus
	u.fieldMap["log_created"] = u.LogCreated
	u.fieldMap["log_modified"] = u.LogModified
}

func (u undoLog) clone(db *gorm.DB) undoLog {
	u.undoLogDo.ReplaceDB(db)
	return u
}

type undoLogDo struct{ gen.DO }

type IUndoLogDo interface {
	gen.SubQuery
	Debug() IUndoLogDo
	WithContext(ctx context.Context) IUndoLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUndoLogDo
	Not(conds ...gen.Condition) IUndoLogDo
	Or(conds ...gen.Condition) IUndoLogDo
	Select(conds ...field.Expr) IUndoLogDo
	Where(conds ...gen.Condition) IUndoLogDo
	Order(conds ...field.Expr) IUndoLogDo
	Distinct(cols ...field.Expr) IUndoLogDo
	Omit(cols ...field.Expr) IUndoLogDo
	Join(table schema.Tabler, on ...field.Expr) IUndoLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUndoLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUndoLogDo
	Group(cols ...field.Expr) IUndoLogDo
	Having(conds ...gen.Condition) IUndoLogDo
	Limit(limit int) IUndoLogDo
	Offset(offset int) IUndoLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUndoLogDo
	Unscoped() IUndoLogDo
	Create(values ...*model.UndoLog) error
	CreateInBatches(values []*model.UndoLog, batchSize int) error
	Save(values ...*model.UndoLog) error
	First() (*model.UndoLog, error)
	Take() (*model.UndoLog, error)
	Last() (*model.UndoLog, error)
	Find() ([]*model.UndoLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UndoLog, err error)
	FindInBatches(result *[]*model.UndoLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UndoLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUndoLogDo
	Assign(attrs ...field.AssignExpr) IUndoLogDo
	Joins(fields ...field.RelationField) IUndoLogDo
	Preload(fields ...field.RelationField) IUndoLogDo
	FirstOrInit() (*model.UndoLog, error)
	FirstOrCreate() (*model.UndoLog, error)
	FindByPage(offset int, limit int) (result []*model.UndoLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUndoLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u undoLogDo) Debug() IUndoLogDo {
	return u.withDO(u.DO.Debug())
}

func (u undoLogDo) WithContext(ctx context.Context) IUndoLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u undoLogDo) ReadDB() IUndoLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u undoLogDo) WriteDB() IUndoLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u undoLogDo) Clauses(conds ...clause.Expression) IUndoLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u undoLogDo) Returning(value interface{}, columns ...string) IUndoLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u undoLogDo) Not(conds ...gen.Condition) IUndoLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u undoLogDo) Or(conds ...gen.Condition) IUndoLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u undoLogDo) Select(conds ...field.Expr) IUndoLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u undoLogDo) Where(conds ...gen.Condition) IUndoLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u undoLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUndoLogDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u undoLogDo) Order(conds ...field.Expr) IUndoLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u undoLogDo) Distinct(cols ...field.Expr) IUndoLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u undoLogDo) Omit(cols ...field.Expr) IUndoLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u undoLogDo) Join(table schema.Tabler, on ...field.Expr) IUndoLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u undoLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUndoLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u undoLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUndoLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u undoLogDo) Group(cols ...field.Expr) IUndoLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u undoLogDo) Having(conds ...gen.Condition) IUndoLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u undoLogDo) Limit(limit int) IUndoLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u undoLogDo) Offset(offset int) IUndoLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u undoLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUndoLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u undoLogDo) Unscoped() IUndoLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u undoLogDo) Create(values ...*model.UndoLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u undoLogDo) CreateInBatches(values []*model.UndoLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u undoLogDo) Save(values ...*model.UndoLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u undoLogDo) First() (*model.UndoLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UndoLog), nil
	}
}

func (u undoLogDo) Take() (*model.UndoLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UndoLog), nil
	}
}

func (u undoLogDo) Last() (*model.UndoLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UndoLog), nil
	}
}

func (u undoLogDo) Find() ([]*model.UndoLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UndoLog), err
}

func (u undoLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UndoLog, err error) {
	buf := make([]*model.UndoLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u undoLogDo) FindInBatches(result *[]*model.UndoLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u undoLogDo) Attrs(attrs ...field.AssignExpr) IUndoLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u undoLogDo) Assign(attrs ...field.AssignExpr) IUndoLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u undoLogDo) Joins(fields ...field.RelationField) IUndoLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u undoLogDo) Preload(fields ...field.RelationField) IUndoLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u undoLogDo) FirstOrInit() (*model.UndoLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UndoLog), nil
	}
}

func (u undoLogDo) FirstOrCreate() (*model.UndoLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UndoLog), nil
	}
}

func (u undoLogDo) FindByPage(offset int, limit int) (result []*model.UndoLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u undoLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u undoLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u undoLogDo) Delete(models ...*model.UndoLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *undoLogDo) withDO(do gen.Dao) *undoLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
