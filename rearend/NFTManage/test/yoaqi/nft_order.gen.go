// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newNftOrder(db *gorm.DB) nftOrder {
	_nftOrder := nftOrder{}

	_nftOrder.nftOrderDo.UseDB(db)
	_nftOrder.nftOrderDo.UseModel(&model.NftOrder{})

	tableName := _nftOrder.nftOrderDo.TableName()
	_nftOrder.ALL = field.NewAsterisk(tableName)
	_nftOrder.ID = field.NewString(tableName, "id")
	_nftOrder.ChainPlatCert = field.NewString(tableName, "chainPlatCert")
	_nftOrder.Gas = field.NewFloat64(tableName, "gas")
	_nftOrder.FromUser = field.NewString(tableName, "fromUser")
	_nftOrder.ToUser = field.NewString(tableName, "toUser")
	_nftOrder.AssetsID = field.NewString(tableName, "assetsId")
	_nftOrder.Num = field.NewInt64(tableName, "num")
	_nftOrder.Price = field.NewFloat64(tableName, "price")
	_nftOrder.Total = field.NewFloat64(tableName, "total")
	_nftOrder.Commission = field.NewFloat64(tableName, "commission")
	_nftOrder.Taxes = field.NewFloat64(tableName, "taxes")
	_nftOrder.SellerAmount = field.NewFloat64(tableName, "sellerAmount")
	_nftOrder.TradeTotal = field.NewFloat64(tableName, "tradeTotal")
	_nftOrder.PayPlat = field.NewInt64(tableName, "payPlat")
	_nftOrder.TradeType = field.NewInt64(tableName, "tradeType")
	_nftOrder.TxTime = field.NewTime(tableName, "txTime")
	_nftOrder.TransactionID = field.NewString(tableName, "transactionId")
	_nftOrder.PayState = field.NewInt64(tableName, "payState")
	_nftOrder.CodeURL = field.NewString(tableName, "codeUrl")
	_nftOrder.PrepayID = field.NewString(tableName, "prepayId")
	_nftOrder.CreateTime = field.NewTime(tableName, "createTime")
	_nftOrder.UpdateTime = field.NewTime(tableName, "updateTime")
	_nftOrder.Bak1 = field.NewString(tableName, "bak1")
	_nftOrder.Bak2 = field.NewString(tableName, "bak2")
	_nftOrder.Bak3 = field.NewString(tableName, "bak3")

	_nftOrder.fillFieldMap()

	return _nftOrder
}

type nftOrder struct {
	nftOrderDo nftOrderDo

	ALL           field.Asterisk
	ID            field.String  // 唯一标识
	ChainPlatCert field.String  // 在不同链平台上链,认证后的数据json
	Gas           field.Float64 // gas总费
	FromUser      field.String  // 卖方
	ToUser        field.String  // 买方
	AssetsID      field.String  // 交易品标识(作品)
	Num           field.Int64   // 交易品数量
	Price         field.Float64 // 单价
	Total         field.Float64 // 商品总额
	Commission    field.Float64 // 佣金(支付给平台的费用)
	Taxes         field.Float64 // 税费(二次交易,支付给作者的费用)=(版税*商品总额)
	SellerAmount  field.Float64 // 卖家收到的金额
	TradeTotal    field.Float64 // 交易总额
	PayPlat       field.Int64   // 支付平台(0:微信支付,1支付宝...)
	TradeType     field.Int64   // 交易类型(0:充值,1:上架合集,2:下架合集,3:上架商品,4:下架商品,5:交易作品,6:转移作品)
	TxTime        field.Time    // 交易时间
	TransactionID field.String  // 支付平台支付订单号
	PayState      field.Int64   // 支付状态.0:未支付,1:已支付,2:已取消
	CodeURL       field.String  // 支付二维码
	PrepayID      field.String  // 预支付id
	CreateTime    field.Time
	UpdateTime    field.Time
	Bak1          field.String
	Bak2          field.String
	Bak3          field.String

	fieldMap map[string]field.Expr
}

func (n nftOrder) Table(newTableName string) *nftOrder {
	n.nftOrderDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nftOrder) As(alias string) *nftOrder {
	n.nftOrderDo.DO = *(n.nftOrderDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nftOrder) updateTableName(table string) *nftOrder {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.ChainPlatCert = field.NewString(table, "chainPlatCert")
	n.Gas = field.NewFloat64(table, "gas")
	n.FromUser = field.NewString(table, "fromUser")
	n.ToUser = field.NewString(table, "toUser")
	n.AssetsID = field.NewString(table, "assetsId")
	n.Num = field.NewInt64(table, "num")
	n.Price = field.NewFloat64(table, "price")
	n.Total = field.NewFloat64(table, "total")
	n.Commission = field.NewFloat64(table, "commission")
	n.Taxes = field.NewFloat64(table, "taxes")
	n.SellerAmount = field.NewFloat64(table, "sellerAmount")
	n.TradeTotal = field.NewFloat64(table, "tradeTotal")
	n.PayPlat = field.NewInt64(table, "payPlat")
	n.TradeType = field.NewInt64(table, "tradeType")
	n.TxTime = field.NewTime(table, "txTime")
	n.TransactionID = field.NewString(table, "transactionId")
	n.PayState = field.NewInt64(table, "payState")
	n.CodeURL = field.NewString(table, "codeUrl")
	n.PrepayID = field.NewString(table, "prepayId")
	n.CreateTime = field.NewTime(table, "createTime")
	n.UpdateTime = field.NewTime(table, "updateTime")
	n.Bak1 = field.NewString(table, "bak1")
	n.Bak2 = field.NewString(table, "bak2")
	n.Bak3 = field.NewString(table, "bak3")

	n.fillFieldMap()

	return n
}

func (n *nftOrder) WithContext(ctx context.Context) INftOrderDo { return n.nftOrderDo.WithContext(ctx) }

func (n nftOrder) TableName() string { return n.nftOrderDo.TableName() }

func (n nftOrder) Alias() string { return n.nftOrderDo.Alias() }

func (n *nftOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nftOrder) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 25)
	n.fieldMap["id"] = n.ID
	n.fieldMap["chainPlatCert"] = n.ChainPlatCert
	n.fieldMap["gas"] = n.Gas
	n.fieldMap["fromUser"] = n.FromUser
	n.fieldMap["toUser"] = n.ToUser
	n.fieldMap["assetsId"] = n.AssetsID
	n.fieldMap["num"] = n.Num
	n.fieldMap["price"] = n.Price
	n.fieldMap["total"] = n.Total
	n.fieldMap["commission"] = n.Commission
	n.fieldMap["taxes"] = n.Taxes
	n.fieldMap["sellerAmount"] = n.SellerAmount
	n.fieldMap["tradeTotal"] = n.TradeTotal
	n.fieldMap["payPlat"] = n.PayPlat
	n.fieldMap["tradeType"] = n.TradeType
	n.fieldMap["txTime"] = n.TxTime
	n.fieldMap["transactionId"] = n.TransactionID
	n.fieldMap["payState"] = n.PayState
	n.fieldMap["codeUrl"] = n.CodeURL
	n.fieldMap["prepayId"] = n.PrepayID
	n.fieldMap["createTime"] = n.CreateTime
	n.fieldMap["updateTime"] = n.UpdateTime
	n.fieldMap["bak1"] = n.Bak1
	n.fieldMap["bak2"] = n.Bak2
	n.fieldMap["bak3"] = n.Bak3
}

func (n nftOrder) clone(db *gorm.DB) nftOrder {
	n.nftOrderDo.ReplaceDB(db)
	return n
}

type nftOrderDo struct{ gen.DO }

type INftOrderDo interface {
	gen.SubQuery
	Debug() INftOrderDo
	WithContext(ctx context.Context) INftOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INftOrderDo
	Not(conds ...gen.Condition) INftOrderDo
	Or(conds ...gen.Condition) INftOrderDo
	Select(conds ...field.Expr) INftOrderDo
	Where(conds ...gen.Condition) INftOrderDo
	Order(conds ...field.Expr) INftOrderDo
	Distinct(cols ...field.Expr) INftOrderDo
	Omit(cols ...field.Expr) INftOrderDo
	Join(table schema.Tabler, on ...field.Expr) INftOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INftOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) INftOrderDo
	Group(cols ...field.Expr) INftOrderDo
	Having(conds ...gen.Condition) INftOrderDo
	Limit(limit int) INftOrderDo
	Offset(offset int) INftOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INftOrderDo
	Unscoped() INftOrderDo
	Create(values ...*model.NftOrder) error
	CreateInBatches(values []*model.NftOrder, batchSize int) error
	Save(values ...*model.NftOrder) error
	First() (*model.NftOrder, error)
	Take() (*model.NftOrder, error)
	Last() (*model.NftOrder, error)
	Find() ([]*model.NftOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NftOrder, err error)
	FindInBatches(result *[]*model.NftOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NftOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INftOrderDo
	Assign(attrs ...field.AssignExpr) INftOrderDo
	Joins(fields ...field.RelationField) INftOrderDo
	Preload(fields ...field.RelationField) INftOrderDo
	FirstOrInit() (*model.NftOrder, error)
	FirstOrCreate() (*model.NftOrder, error)
	FindByPage(offset int, limit int) (result []*model.NftOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INftOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nftOrderDo) Debug() INftOrderDo {
	return n.withDO(n.DO.Debug())
}

func (n nftOrderDo) WithContext(ctx context.Context) INftOrderDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nftOrderDo) ReadDB() INftOrderDo {
	return n.Clauses(dbresolver.Read)
}

func (n nftOrderDo) WriteDB() INftOrderDo {
	return n.Clauses(dbresolver.Write)
}

func (n nftOrderDo) Clauses(conds ...clause.Expression) INftOrderDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nftOrderDo) Returning(value interface{}, columns ...string) INftOrderDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nftOrderDo) Not(conds ...gen.Condition) INftOrderDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nftOrderDo) Or(conds ...gen.Condition) INftOrderDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nftOrderDo) Select(conds ...field.Expr) INftOrderDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nftOrderDo) Where(conds ...gen.Condition) INftOrderDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nftOrderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) INftOrderDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n nftOrderDo) Order(conds ...field.Expr) INftOrderDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nftOrderDo) Distinct(cols ...field.Expr) INftOrderDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nftOrderDo) Omit(cols ...field.Expr) INftOrderDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nftOrderDo) Join(table schema.Tabler, on ...field.Expr) INftOrderDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nftOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) INftOrderDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nftOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) INftOrderDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nftOrderDo) Group(cols ...field.Expr) INftOrderDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nftOrderDo) Having(conds ...gen.Condition) INftOrderDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nftOrderDo) Limit(limit int) INftOrderDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nftOrderDo) Offset(offset int) INftOrderDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nftOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INftOrderDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nftOrderDo) Unscoped() INftOrderDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nftOrderDo) Create(values ...*model.NftOrder) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nftOrderDo) CreateInBatches(values []*model.NftOrder, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nftOrderDo) Save(values ...*model.NftOrder) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nftOrderDo) First() (*model.NftOrder, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftOrder), nil
	}
}

func (n nftOrderDo) Take() (*model.NftOrder, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftOrder), nil
	}
}

func (n nftOrderDo) Last() (*model.NftOrder, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftOrder), nil
	}
}

func (n nftOrderDo) Find() ([]*model.NftOrder, error) {
	result, err := n.DO.Find()
	return result.([]*model.NftOrder), err
}

func (n nftOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NftOrder, err error) {
	buf := make([]*model.NftOrder, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nftOrderDo) FindInBatches(result *[]*model.NftOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nftOrderDo) Attrs(attrs ...field.AssignExpr) INftOrderDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nftOrderDo) Assign(attrs ...field.AssignExpr) INftOrderDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nftOrderDo) Joins(fields ...field.RelationField) INftOrderDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nftOrderDo) Preload(fields ...field.RelationField) INftOrderDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nftOrderDo) FirstOrInit() (*model.NftOrder, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftOrder), nil
	}
}

func (n nftOrderDo) FirstOrCreate() (*model.NftOrder, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftOrder), nil
	}
}

func (n nftOrderDo) FindByPage(offset int, limit int) (result []*model.NftOrder, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nftOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nftOrderDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nftOrderDo) Delete(models ...*model.NftOrder) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nftOrderDo) withDO(do gen.Dao) *nftOrderDo {
	n.DO = *do.(*gen.DO)
	return n
}
