// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newGlobalTable(db *gorm.DB) globalTable {
	_globalTable := globalTable{}

	_globalTable.globalTableDo.UseDB(db)
	_globalTable.globalTableDo.UseModel(&model.GlobalTable{})

	tableName := _globalTable.globalTableDo.TableName()
	_globalTable.ALL = field.NewAsterisk(tableName)
	_globalTable.Xid = field.NewString(tableName, "xid")
	_globalTable.TransactionID = field.NewInt64(tableName, "transaction_id")
	_globalTable.Status = field.NewInt64(tableName, "status")
	_globalTable.ApplicationID = field.NewString(tableName, "application_id")
	_globalTable.TransactionServiceGroup = field.NewString(tableName, "transaction_service_group")
	_globalTable.TransactionName = field.NewString(tableName, "transaction_name")
	_globalTable.Timeout = field.NewInt64(tableName, "timeout")
	_globalTable.BeginTime = field.NewInt64(tableName, "begin_time")
	_globalTable.ApplicationData = field.NewString(tableName, "application_data")
	_globalTable.GmtCreate = field.NewTime(tableName, "gmt_create")
	_globalTable.GmtModified = field.NewTime(tableName, "gmt_modified")

	_globalTable.fillFieldMap()

	return _globalTable
}

type globalTable struct {
	globalTableDo globalTableDo

	ALL                     field.Asterisk
	Xid                     field.String
	TransactionID           field.Int64
	Status                  field.Int64
	ApplicationID           field.String
	TransactionServiceGroup field.String
	TransactionName         field.String
	Timeout                 field.Int64
	BeginTime               field.Int64
	ApplicationData         field.String
	GmtCreate               field.Time
	GmtModified             field.Time

	fieldMap map[string]field.Expr
}

func (g globalTable) Table(newTableName string) *globalTable {
	g.globalTableDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g globalTable) As(alias string) *globalTable {
	g.globalTableDo.DO = *(g.globalTableDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *globalTable) updateTableName(table string) *globalTable {
	g.ALL = field.NewAsterisk(table)
	g.Xid = field.NewString(table, "xid")
	g.TransactionID = field.NewInt64(table, "transaction_id")
	g.Status = field.NewInt64(table, "status")
	g.ApplicationID = field.NewString(table, "application_id")
	g.TransactionServiceGroup = field.NewString(table, "transaction_service_group")
	g.TransactionName = field.NewString(table, "transaction_name")
	g.Timeout = field.NewInt64(table, "timeout")
	g.BeginTime = field.NewInt64(table, "begin_time")
	g.ApplicationData = field.NewString(table, "application_data")
	g.GmtCreate = field.NewTime(table, "gmt_create")
	g.GmtModified = field.NewTime(table, "gmt_modified")

	g.fillFieldMap()

	return g
}

func (g *globalTable) WithContext(ctx context.Context) IGlobalTableDo {
	return g.globalTableDo.WithContext(ctx)
}

func (g globalTable) TableName() string { return g.globalTableDo.TableName() }

func (g globalTable) Alias() string { return g.globalTableDo.Alias() }

func (g *globalTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *globalTable) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["xid"] = g.Xid
	g.fieldMap["transaction_id"] = g.TransactionID
	g.fieldMap["status"] = g.Status
	g.fieldMap["application_id"] = g.ApplicationID
	g.fieldMap["transaction_service_group"] = g.TransactionServiceGroup
	g.fieldMap["transaction_name"] = g.TransactionName
	g.fieldMap["timeout"] = g.Timeout
	g.fieldMap["begin_time"] = g.BeginTime
	g.fieldMap["application_data"] = g.ApplicationData
	g.fieldMap["gmt_create"] = g.GmtCreate
	g.fieldMap["gmt_modified"] = g.GmtModified
}

func (g globalTable) clone(db *gorm.DB) globalTable {
	g.globalTableDo.ReplaceDB(db)
	return g
}

type globalTableDo struct{ gen.DO }

type IGlobalTableDo interface {
	gen.SubQuery
	Debug() IGlobalTableDo
	WithContext(ctx context.Context) IGlobalTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGlobalTableDo
	Not(conds ...gen.Condition) IGlobalTableDo
	Or(conds ...gen.Condition) IGlobalTableDo
	Select(conds ...field.Expr) IGlobalTableDo
	Where(conds ...gen.Condition) IGlobalTableDo
	Order(conds ...field.Expr) IGlobalTableDo
	Distinct(cols ...field.Expr) IGlobalTableDo
	Omit(cols ...field.Expr) IGlobalTableDo
	Join(table schema.Tabler, on ...field.Expr) IGlobalTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGlobalTableDo
	Group(cols ...field.Expr) IGlobalTableDo
	Having(conds ...gen.Condition) IGlobalTableDo
	Limit(limit int) IGlobalTableDo
	Offset(offset int) IGlobalTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalTableDo
	Unscoped() IGlobalTableDo
	Create(values ...*model.GlobalTable) error
	CreateInBatches(values []*model.GlobalTable, batchSize int) error
	Save(values ...*model.GlobalTable) error
	First() (*model.GlobalTable, error)
	Take() (*model.GlobalTable, error)
	Last() (*model.GlobalTable, error)
	Find() ([]*model.GlobalTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalTable, err error)
	FindInBatches(result *[]*model.GlobalTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GlobalTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGlobalTableDo
	Assign(attrs ...field.AssignExpr) IGlobalTableDo
	Joins(fields ...field.RelationField) IGlobalTableDo
	Preload(fields ...field.RelationField) IGlobalTableDo
	FirstOrInit() (*model.GlobalTable, error)
	FirstOrCreate() (*model.GlobalTable, error)
	FindByPage(offset int, limit int) (result []*model.GlobalTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGlobalTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g globalTableDo) Debug() IGlobalTableDo {
	return g.withDO(g.DO.Debug())
}

func (g globalTableDo) WithContext(ctx context.Context) IGlobalTableDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g globalTableDo) ReadDB() IGlobalTableDo {
	return g.Clauses(dbresolver.Read)
}

func (g globalTableDo) WriteDB() IGlobalTableDo {
	return g.Clauses(dbresolver.Write)
}

func (g globalTableDo) Clauses(conds ...clause.Expression) IGlobalTableDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g globalTableDo) Returning(value interface{}, columns ...string) IGlobalTableDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g globalTableDo) Not(conds ...gen.Condition) IGlobalTableDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g globalTableDo) Or(conds ...gen.Condition) IGlobalTableDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g globalTableDo) Select(conds ...field.Expr) IGlobalTableDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g globalTableDo) Where(conds ...gen.Condition) IGlobalTableDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g globalTableDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGlobalTableDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g globalTableDo) Order(conds ...field.Expr) IGlobalTableDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g globalTableDo) Distinct(cols ...field.Expr) IGlobalTableDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g globalTableDo) Omit(cols ...field.Expr) IGlobalTableDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g globalTableDo) Join(table schema.Tabler, on ...field.Expr) IGlobalTableDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g globalTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalTableDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g globalTableDo) RightJoin(table schema.Tabler, on ...field.Expr) IGlobalTableDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g globalTableDo) Group(cols ...field.Expr) IGlobalTableDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g globalTableDo) Having(conds ...gen.Condition) IGlobalTableDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g globalTableDo) Limit(limit int) IGlobalTableDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g globalTableDo) Offset(offset int) IGlobalTableDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g globalTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalTableDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g globalTableDo) Unscoped() IGlobalTableDo {
	return g.withDO(g.DO.Unscoped())
}

func (g globalTableDo) Create(values ...*model.GlobalTable) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g globalTableDo) CreateInBatches(values []*model.GlobalTable, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g globalTableDo) Save(values ...*model.GlobalTable) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g globalTableDo) First() (*model.GlobalTable, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalTable), nil
	}
}

func (g globalTableDo) Take() (*model.GlobalTable, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalTable), nil
	}
}

func (g globalTableDo) Last() (*model.GlobalTable, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalTable), nil
	}
}

func (g globalTableDo) Find() ([]*model.GlobalTable, error) {
	result, err := g.DO.Find()
	return result.([]*model.GlobalTable), err
}

func (g globalTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalTable, err error) {
	buf := make([]*model.GlobalTable, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g globalTableDo) FindInBatches(result *[]*model.GlobalTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g globalTableDo) Attrs(attrs ...field.AssignExpr) IGlobalTableDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g globalTableDo) Assign(attrs ...field.AssignExpr) IGlobalTableDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g globalTableDo) Joins(fields ...field.RelationField) IGlobalTableDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g globalTableDo) Preload(fields ...field.RelationField) IGlobalTableDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g globalTableDo) FirstOrInit() (*model.GlobalTable, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalTable), nil
	}
}

func (g globalTableDo) FirstOrCreate() (*model.GlobalTable, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalTable), nil
	}
}

func (g globalTableDo) FindByPage(offset int, limit int) (result []*model.GlobalTable, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g globalTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g globalTableDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g globalTableDo) Delete(models ...*model.GlobalTable) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *globalTableDo) withDO(do gen.Dao) *globalTableDo {
	g.DO = *do.(*gen.DO)
	return g
}
