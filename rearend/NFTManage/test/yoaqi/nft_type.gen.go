// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoaqi

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yqnft/NFTManage/test/model"
)

func newNftType(db *gorm.DB) nftType {
	_nftType := nftType{}

	_nftType.nftTypeDo.UseDB(db)
	_nftType.nftTypeDo.UseModel(&model.NftType{})

	tableName := _nftType.nftTypeDo.TableName()
	_nftType.ALL = field.NewAsterisk(tableName)
	_nftType.ID = field.NewString(tableName, "id")
	_nftType.Name = field.NewString(tableName, "name")
	_nftType.Value = field.NewInt64(tableName, "value")

	_nftType.fillFieldMap()

	return _nftType
}

type nftType struct {
	nftTypeDo nftTypeDo

	ALL   field.Asterisk
	ID    field.String // 唯一标识
	Name  field.String // 名称
	Value field.Int64  // 值

	fieldMap map[string]field.Expr
}

func (n nftType) Table(newTableName string) *nftType {
	n.nftTypeDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nftType) As(alias string) *nftType {
	n.nftTypeDo.DO = *(n.nftTypeDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nftType) updateTableName(table string) *nftType {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.Name = field.NewString(table, "name")
	n.Value = field.NewInt64(table, "value")

	n.fillFieldMap()

	return n
}

func (n *nftType) WithContext(ctx context.Context) INftTypeDo { return n.nftTypeDo.WithContext(ctx) }

func (n nftType) TableName() string { return n.nftTypeDo.TableName() }

func (n nftType) Alias() string { return n.nftTypeDo.Alias() }

func (n *nftType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nftType) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 3)
	n.fieldMap["id"] = n.ID
	n.fieldMap["name"] = n.Name
	n.fieldMap["value"] = n.Value
}

func (n nftType) clone(db *gorm.DB) nftType {
	n.nftTypeDo.ReplaceDB(db)
	return n
}

type nftTypeDo struct{ gen.DO }

type INftTypeDo interface {
	gen.SubQuery
	Debug() INftTypeDo
	WithContext(ctx context.Context) INftTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INftTypeDo
	Not(conds ...gen.Condition) INftTypeDo
	Or(conds ...gen.Condition) INftTypeDo
	Select(conds ...field.Expr) INftTypeDo
	Where(conds ...gen.Condition) INftTypeDo
	Order(conds ...field.Expr) INftTypeDo
	Distinct(cols ...field.Expr) INftTypeDo
	Omit(cols ...field.Expr) INftTypeDo
	Join(table schema.Tabler, on ...field.Expr) INftTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INftTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) INftTypeDo
	Group(cols ...field.Expr) INftTypeDo
	Having(conds ...gen.Condition) INftTypeDo
	Limit(limit int) INftTypeDo
	Offset(offset int) INftTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INftTypeDo
	Unscoped() INftTypeDo
	Create(values ...*model.NftType) error
	CreateInBatches(values []*model.NftType, batchSize int) error
	Save(values ...*model.NftType) error
	First() (*model.NftType, error)
	Take() (*model.NftType, error)
	Last() (*model.NftType, error)
	Find() ([]*model.NftType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NftType, err error)
	FindInBatches(result *[]*model.NftType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NftType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INftTypeDo
	Assign(attrs ...field.AssignExpr) INftTypeDo
	Joins(fields ...field.RelationField) INftTypeDo
	Preload(fields ...field.RelationField) INftTypeDo
	FirstOrInit() (*model.NftType, error)
	FirstOrCreate() (*model.NftType, error)
	FindByPage(offset int, limit int) (result []*model.NftType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INftTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nftTypeDo) Debug() INftTypeDo {
	return n.withDO(n.DO.Debug())
}

func (n nftTypeDo) WithContext(ctx context.Context) INftTypeDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nftTypeDo) ReadDB() INftTypeDo {
	return n.Clauses(dbresolver.Read)
}

func (n nftTypeDo) WriteDB() INftTypeDo {
	return n.Clauses(dbresolver.Write)
}

func (n nftTypeDo) Clauses(conds ...clause.Expression) INftTypeDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nftTypeDo) Returning(value interface{}, columns ...string) INftTypeDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nftTypeDo) Not(conds ...gen.Condition) INftTypeDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nftTypeDo) Or(conds ...gen.Condition) INftTypeDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nftTypeDo) Select(conds ...field.Expr) INftTypeDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nftTypeDo) Where(conds ...gen.Condition) INftTypeDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nftTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) INftTypeDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n nftTypeDo) Order(conds ...field.Expr) INftTypeDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nftTypeDo) Distinct(cols ...field.Expr) INftTypeDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nftTypeDo) Omit(cols ...field.Expr) INftTypeDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nftTypeDo) Join(table schema.Tabler, on ...field.Expr) INftTypeDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nftTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) INftTypeDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nftTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) INftTypeDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nftTypeDo) Group(cols ...field.Expr) INftTypeDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nftTypeDo) Having(conds ...gen.Condition) INftTypeDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nftTypeDo) Limit(limit int) INftTypeDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nftTypeDo) Offset(offset int) INftTypeDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nftTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INftTypeDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nftTypeDo) Unscoped() INftTypeDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nftTypeDo) Create(values ...*model.NftType) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nftTypeDo) CreateInBatches(values []*model.NftType, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nftTypeDo) Save(values ...*model.NftType) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nftTypeDo) First() (*model.NftType, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftType), nil
	}
}

func (n nftTypeDo) Take() (*model.NftType, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftType), nil
	}
}

func (n nftTypeDo) Last() (*model.NftType, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftType), nil
	}
}

func (n nftTypeDo) Find() ([]*model.NftType, error) {
	result, err := n.DO.Find()
	return result.([]*model.NftType), err
}

func (n nftTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NftType, err error) {
	buf := make([]*model.NftType, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nftTypeDo) FindInBatches(result *[]*model.NftType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nftTypeDo) Attrs(attrs ...field.AssignExpr) INftTypeDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nftTypeDo) Assign(attrs ...field.AssignExpr) INftTypeDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nftTypeDo) Joins(fields ...field.RelationField) INftTypeDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nftTypeDo) Preload(fields ...field.RelationField) INftTypeDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nftTypeDo) FirstOrInit() (*model.NftType, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftType), nil
	}
}

func (n nftTypeDo) FirstOrCreate() (*model.NftType, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftType), nil
	}
}

func (n nftTypeDo) FindByPage(offset int, limit int) (result []*model.NftType, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nftTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nftTypeDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nftTypeDo) Delete(models ...*model.NftType) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nftTypeDo) withDO(do gen.Dao) *nftTypeDo {
	n.DO = *do.(*gen.DO)
	return n
}
