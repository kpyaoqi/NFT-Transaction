// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"
)

const TableNameNftUserAsset = "nft_user_assets"

// NftUserAsset mapped from table <nft_user_assets>
type NftUserAsset struct {
	ID         string     `gorm:"column:id;type:varchar(50);primaryKey" json:"id"`           // 唯一标识
	UserID     string     `gorm:"column:userId;type:varchar(50);not null" json:"userId"`     // 用户标识
	AssetsID   string     `gorm:"column:assetsId;type:varchar(50);not null" json:"assetsId"` // 资源标识
	Type       int64      `gorm:"column:type;type:int;not null" json:"type"`                 // 资源类型0:合集,1:作品
	Origin     int64      `gorm:"column:origin;type:int;not null" json:"origin"`             // 资产来源(0:自己创作,1购买其他作者)
	SellState  int64      `gorm:"column:sellState;type:int;not null" json:"sellState"`       // 出售状态,0:不出售,1:售卖中,2:已生成订单,3:已删除
	CreateTime time.Time  `gorm:"column:createTime;type:datetime;not null" json:"createTime"`
	UpdateTime *time.Time `gorm:"column:updateTime;type:datetime" json:"updateTime"`
	Bak1       *string    `gorm:"column:bak1;type:varchar(255)" json:"bak1"`
	Bak2       *string    `gorm:"column:bak2;type:varchar(255)" json:"bak2"`
	Bak3       *string    `gorm:"column:bak3;type:varchar(255)" json:"bak3"`
}

// TableName NftUserAsset's table name
func (*NftUserAsset) TableName() string {
	return TableNameNftUserAsset
}
