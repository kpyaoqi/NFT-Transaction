// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"
)

const TableNameNftWorksHi = "nft_works_his"

// NftWorksHi mapped from table <nft_works_his>
type NftWorksHi struct {
	ID            string     `gorm:"column:id;type:varchar(50);primaryKey" json:"id"`           // 唯一标识
	WorksID       string     `gorm:"column:worksId;type:varchar(50);not null" json:"worksId"`   // 作品标识
	Type          *int64     `gorm:"column:type;type:int" json:"type"`                          // 类型(0:售卖,1:转移)
	ChainPlatCert *string    `gorm:"column:chainPlatCert;type:json" json:"chainPlatCert"`       // 在不同链平台上链,认证后的数据json(使用区块链浏览器查询)
	Num           int64      `gorm:"column:num;type:int;not null" json:"num"`                   // 作品数量
	Price         float64    `gorm:"column:price;type:decimal(20,2);not null" json:"price"`     // 价格
	FromUser      string     `gorm:"column:fromUser;type:varchar(50);not null" json:"fromUser"` // 卖方
	ToUser        string     `gorm:"column:toUser;type:varchar(50);not null" json:"toUser"`     // 买方
	TradeTime     time.Time  `gorm:"column:tradeTime;type:datetime;not null" json:"tradeTime"`  // 交易时间
	CreateTime    time.Time  `gorm:"column:createTime;type:datetime;not null" json:"createTime"`
	UpdateTime    *time.Time `gorm:"column:updateTime;type:datetime" json:"updateTime"`
	Bak1          *string    `gorm:"column:bak1;type:varchar(255)" json:"bak1"`
	Bak2          *string    `gorm:"column:bak2;type:varchar(255)" json:"bak2"`
	Bak3          *string    `gorm:"column:bak3;type:varchar(255)" json:"bak3"`
}

// TableName NftWorksHi's table name
func (*NftWorksHi) TableName() string {
	return TableNameNftWorksHi
}
