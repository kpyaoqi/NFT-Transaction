// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"yqnft/NFTManage/models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWxMenu(db *gorm.DB) wxMenu {
	_wxMenu := wxMenu{}

	_wxMenu.wxMenuDo.UseDB(db)
	_wxMenu.wxMenuDo.UseModel(&model.WxMenu{})

	tableName := _wxMenu.wxMenuDo.TableName()
	_wxMenu.ALL = field.NewAsterisk(tableName)
	_wxMenu.ID = field.NewString(tableName, "id")
	_wxMenu.Name = field.NewString(tableName, "name")
	_wxMenu.Type = field.NewString(tableName, "type")
	_wxMenu.Keyword = field.NewString(tableName, "keyword")
	_wxMenu.URL = field.NewString(tableName, "url")
	_wxMenu.Pid = field.NewString(tableName, "pid")
	_wxMenu.CreateDate = field.NewTime(tableName, "createDate")
	_wxMenu.SiteID = field.NewString(tableName, "siteId")
	_wxMenu.Bak1 = field.NewString(tableName, "bak1")
	_wxMenu.Bak2 = field.NewString(tableName, "bak2")
	_wxMenu.Bak3 = field.NewString(tableName, "bak3")
	_wxMenu.Bak4 = field.NewString(tableName, "bak4")
	_wxMenu.Bak5 = field.NewString(tableName, "bak5")

	_wxMenu.fillFieldMap()

	return _wxMenu
}

type wxMenu struct {
	wxMenuDo wxMenuDo

	ALL        field.Asterisk
	ID         field.String // id
	Name       field.String // 菜单名称
	Type       field.String // 菜单类型
	Keyword    field.String // 消息内容
	URL        field.String // 跳转地址
	Pid        field.String // 上级菜单id
	CreateDate field.Time   // 创建时间
	SiteID     field.String // 站点id
	Bak1       field.String
	Bak2       field.String
	Bak3       field.String
	Bak4       field.String
	Bak5       field.String

	fieldMap map[string]field.Expr
}

func (w wxMenu) Table(newTableName string) *wxMenu {
	w.wxMenuDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wxMenu) As(alias string) *wxMenu {
	w.wxMenuDo.DO = *(w.wxMenuDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wxMenu) updateTableName(table string) *wxMenu {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewString(table, "id")
	w.Name = field.NewString(table, "name")
	w.Type = field.NewString(table, "type")
	w.Keyword = field.NewString(table, "keyword")
	w.URL = field.NewString(table, "url")
	w.Pid = field.NewString(table, "pid")
	w.CreateDate = field.NewTime(table, "createDate")
	w.SiteID = field.NewString(table, "siteId")
	w.Bak1 = field.NewString(table, "bak1")
	w.Bak2 = field.NewString(table, "bak2")
	w.Bak3 = field.NewString(table, "bak3")
	w.Bak4 = field.NewString(table, "bak4")
	w.Bak5 = field.NewString(table, "bak5")

	w.fillFieldMap()

	return w
}

func (w *wxMenu) WithContext(ctx context.Context) IWxMenuDo { return w.wxMenuDo.WithContext(ctx) }

func (w wxMenu) TableName() string { return w.wxMenuDo.TableName() }

func (w wxMenu) Alias() string { return w.wxMenuDo.Alias() }

func (w *wxMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wxMenu) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 13)
	w.fieldMap["id"] = w.ID
	w.fieldMap["name"] = w.Name
	w.fieldMap["type"] = w.Type
	w.fieldMap["keyword"] = w.Keyword
	w.fieldMap["url"] = w.URL
	w.fieldMap["pid"] = w.Pid
	w.fieldMap["createDate"] = w.CreateDate
	w.fieldMap["siteId"] = w.SiteID
	w.fieldMap["bak1"] = w.Bak1
	w.fieldMap["bak2"] = w.Bak2
	w.fieldMap["bak3"] = w.Bak3
	w.fieldMap["bak4"] = w.Bak4
	w.fieldMap["bak5"] = w.Bak5
}

func (w wxMenu) clone(db *gorm.DB) wxMenu {
	w.wxMenuDo.ReplaceDB(db)
	return w
}

type wxMenuDo struct{ gen.DO }

type IWxMenuDo interface {
	gen.SubQuery
	Debug() IWxMenuDo
	WithContext(ctx context.Context) IWxMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWxMenuDo
	Not(conds ...gen.Condition) IWxMenuDo
	Or(conds ...gen.Condition) IWxMenuDo
	Select(conds ...field.Expr) IWxMenuDo
	Where(conds ...gen.Condition) IWxMenuDo
	Order(conds ...field.Expr) IWxMenuDo
	Distinct(cols ...field.Expr) IWxMenuDo
	Omit(cols ...field.Expr) IWxMenuDo
	Join(table schema.Tabler, on ...field.Expr) IWxMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWxMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWxMenuDo
	Group(cols ...field.Expr) IWxMenuDo
	Having(conds ...gen.Condition) IWxMenuDo
	Limit(limit int) IWxMenuDo
	Offset(offset int) IWxMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWxMenuDo
	Unscoped() IWxMenuDo
	Create(values ...*model.WxMenu) error
	CreateInBatches(values []*model.WxMenu, batchSize int) error
	Save(values ...*model.WxMenu) error
	First() (*model.WxMenu, error)
	Take() (*model.WxMenu, error)
	Last() (*model.WxMenu, error)
	Find() ([]*model.WxMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxMenu, err error)
	FindInBatches(result *[]*model.WxMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WxMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWxMenuDo
	Assign(attrs ...field.AssignExpr) IWxMenuDo
	Joins(fields ...field.RelationField) IWxMenuDo
	Preload(fields ...field.RelationField) IWxMenuDo
	FirstOrInit() (*model.WxMenu, error)
	FirstOrCreate() (*model.WxMenu, error)
	FindByPage(offset int, limit int) (result []*model.WxMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWxMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wxMenuDo) Debug() IWxMenuDo {
	return w.withDO(w.DO.Debug())
}

func (w wxMenuDo) WithContext(ctx context.Context) IWxMenuDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wxMenuDo) ReadDB() IWxMenuDo {
	return w.Clauses(dbresolver.Read)
}

func (w wxMenuDo) WriteDB() IWxMenuDo {
	return w.Clauses(dbresolver.Write)
}

func (w wxMenuDo) Clauses(conds ...clause.Expression) IWxMenuDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wxMenuDo) Returning(value interface{}, columns ...string) IWxMenuDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wxMenuDo) Not(conds ...gen.Condition) IWxMenuDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wxMenuDo) Or(conds ...gen.Condition) IWxMenuDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wxMenuDo) Select(conds ...field.Expr) IWxMenuDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wxMenuDo) Where(conds ...gen.Condition) IWxMenuDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wxMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWxMenuDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wxMenuDo) Order(conds ...field.Expr) IWxMenuDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wxMenuDo) Distinct(cols ...field.Expr) IWxMenuDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wxMenuDo) Omit(cols ...field.Expr) IWxMenuDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wxMenuDo) Join(table schema.Tabler, on ...field.Expr) IWxMenuDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wxMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWxMenuDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wxMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IWxMenuDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wxMenuDo) Group(cols ...field.Expr) IWxMenuDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wxMenuDo) Having(conds ...gen.Condition) IWxMenuDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wxMenuDo) Limit(limit int) IWxMenuDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wxMenuDo) Offset(offset int) IWxMenuDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wxMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWxMenuDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wxMenuDo) Unscoped() IWxMenuDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wxMenuDo) Create(values ...*model.WxMenu) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wxMenuDo) CreateInBatches(values []*model.WxMenu, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wxMenuDo) Save(values ...*model.WxMenu) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wxMenuDo) First() (*model.WxMenu, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMenu), nil
	}
}

func (w wxMenuDo) Take() (*model.WxMenu, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMenu), nil
	}
}

func (w wxMenuDo) Last() (*model.WxMenu, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMenu), nil
	}
}

func (w wxMenuDo) Find() ([]*model.WxMenu, error) {
	result, err := w.DO.Find()
	return result.([]*model.WxMenu), err
}

func (w wxMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxMenu, err error) {
	buf := make([]*model.WxMenu, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wxMenuDo) FindInBatches(result *[]*model.WxMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wxMenuDo) Attrs(attrs ...field.AssignExpr) IWxMenuDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wxMenuDo) Assign(attrs ...field.AssignExpr) IWxMenuDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wxMenuDo) Joins(fields ...field.RelationField) IWxMenuDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wxMenuDo) Preload(fields ...field.RelationField) IWxMenuDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wxMenuDo) FirstOrInit() (*model.WxMenu, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMenu), nil
	}
}

func (w wxMenuDo) FirstOrCreate() (*model.WxMenu, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMenu), nil
	}
}

func (w wxMenuDo) FindByPage(offset int, limit int) (result []*model.WxMenu, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wxMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wxMenuDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wxMenuDo) Delete(models ...*model.WxMenu) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wxMenuDo) withDO(do gen.Dao) *wxMenuDo {
	w.DO = *do.(*gen.DO)
	return w
}
