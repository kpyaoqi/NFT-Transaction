// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"yqnft/NFTManage/models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTPermissionsLog(db *gorm.DB) tPermissionsLog {
	_tPermissionsLog := tPermissionsLog{}

	_tPermissionsLog.tPermissionsLogDo.UseDB(db)
	_tPermissionsLog.tPermissionsLogDo.UseModel(&model.TPermissionsLog{})

	tableName := _tPermissionsLog.tPermissionsLogDo.TableName()
	_tPermissionsLog.ALL = field.NewAsterisk(tableName)
	_tPermissionsLog.ID = field.NewString(tableName, "id")
	_tPermissionsLog.SiteID = field.NewString(tableName, "siteId")
	_tPermissionsLog.ActionType = field.NewInt64(tableName, "actionType")
	_tPermissionsLog.OperatorUserID = field.NewString(tableName, "operatorUserId")
	_tPermissionsLog.OperatorUserName = field.NewString(tableName, "operatorUserName")
	_tPermissionsLog.OperatorUserRoles = field.NewString(tableName, "operatorUserRoles")
	_tPermissionsLog.OperatorObjectType = field.NewInt64(tableName, "operatorObjectType")
	_tPermissionsLog.OperatorObjectID = field.NewString(tableName, "operatorObjectId")
	_tPermissionsLog.OperatorObjectName = field.NewString(tableName, "operatorObjectName")
	_tPermissionsLog.ActionContent = field.NewString(tableName, "actionContent")
	_tPermissionsLog.CreateUserID = field.NewString(tableName, "createUserId")
	_tPermissionsLog.CreateTime = field.NewTime(tableName, "createTime")
	_tPermissionsLog.Bak1 = field.NewString(tableName, "bak1")
	_tPermissionsLog.Bak2 = field.NewString(tableName, "bak2")
	_tPermissionsLog.Bak3 = field.NewString(tableName, "bak3")
	_tPermissionsLog.Bak4 = field.NewString(tableName, "bak4")
	_tPermissionsLog.Bak5 = field.NewString(tableName, "bak5")

	_tPermissionsLog.fillFieldMap()

	return _tPermissionsLog
}

type tPermissionsLog struct {
	tPermissionsLogDo tPermissionsLogDo

	ALL                field.Asterisk
	ID                 field.String // 主键
	SiteID             field.String // 站点ID
	ActionType         field.Int64  // 操作类型 创建、编辑、删除、启用、禁用
	OperatorUserID     field.String // 操作人ID
	OperatorUserName   field.String // 操作人当时名称
	OperatorUserRoles  field.String // 操作人当时所属角色名称，逗号分割
	OperatorObjectType field.Int64  // 操作对象类型
	OperatorObjectID   field.String // 操作对象ID
	OperatorObjectName field.String // 操作对象当时的名称
	ActionContent      field.String // 操作内容详情
	CreateUserID       field.String // 记录创建人
	CreateTime         field.Time   // 记录创建时间
	Bak1               field.String // 备用字段
	Bak2               field.String // 备用字段
	Bak3               field.String // 备用字段
	Bak4               field.String // 备用字段
	Bak5               field.String // 备用字段

	fieldMap map[string]field.Expr
}

func (t tPermissionsLog) Table(newTableName string) *tPermissionsLog {
	t.tPermissionsLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPermissionsLog) As(alias string) *tPermissionsLog {
	t.tPermissionsLogDo.DO = *(t.tPermissionsLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPermissionsLog) updateTableName(table string) *tPermissionsLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.SiteID = field.NewString(table, "siteId")
	t.ActionType = field.NewInt64(table, "actionType")
	t.OperatorUserID = field.NewString(table, "operatorUserId")
	t.OperatorUserName = field.NewString(table, "operatorUserName")
	t.OperatorUserRoles = field.NewString(table, "operatorUserRoles")
	t.OperatorObjectType = field.NewInt64(table, "operatorObjectType")
	t.OperatorObjectID = field.NewString(table, "operatorObjectId")
	t.OperatorObjectName = field.NewString(table, "operatorObjectName")
	t.ActionContent = field.NewString(table, "actionContent")
	t.CreateUserID = field.NewString(table, "createUserId")
	t.CreateTime = field.NewTime(table, "createTime")
	t.Bak1 = field.NewString(table, "bak1")
	t.Bak2 = field.NewString(table, "bak2")
	t.Bak3 = field.NewString(table, "bak3")
	t.Bak4 = field.NewString(table, "bak4")
	t.Bak5 = field.NewString(table, "bak5")

	t.fillFieldMap()

	return t
}

func (t *tPermissionsLog) WithContext(ctx context.Context) ITPermissionsLogDo {
	return t.tPermissionsLogDo.WithContext(ctx)
}

func (t tPermissionsLog) TableName() string { return t.tPermissionsLogDo.TableName() }

func (t tPermissionsLog) Alias() string { return t.tPermissionsLogDo.Alias() }

func (t *tPermissionsLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPermissionsLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.ID
	t.fieldMap["siteId"] = t.SiteID
	t.fieldMap["actionType"] = t.ActionType
	t.fieldMap["operatorUserId"] = t.OperatorUserID
	t.fieldMap["operatorUserName"] = t.OperatorUserName
	t.fieldMap["operatorUserRoles"] = t.OperatorUserRoles
	t.fieldMap["operatorObjectType"] = t.OperatorObjectType
	t.fieldMap["operatorObjectId"] = t.OperatorObjectID
	t.fieldMap["operatorObjectName"] = t.OperatorObjectName
	t.fieldMap["actionContent"] = t.ActionContent
	t.fieldMap["createUserId"] = t.CreateUserID
	t.fieldMap["createTime"] = t.CreateTime
	t.fieldMap["bak1"] = t.Bak1
	t.fieldMap["bak2"] = t.Bak2
	t.fieldMap["bak3"] = t.Bak3
	t.fieldMap["bak4"] = t.Bak4
	t.fieldMap["bak5"] = t.Bak5
}

func (t tPermissionsLog) clone(db *gorm.DB) tPermissionsLog {
	t.tPermissionsLogDo.ReplaceDB(db)
	return t
}

type tPermissionsLogDo struct{ gen.DO }

type ITPermissionsLogDo interface {
	gen.SubQuery
	Debug() ITPermissionsLogDo
	WithContext(ctx context.Context) ITPermissionsLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITPermissionsLogDo
	Not(conds ...gen.Condition) ITPermissionsLogDo
	Or(conds ...gen.Condition) ITPermissionsLogDo
	Select(conds ...field.Expr) ITPermissionsLogDo
	Where(conds ...gen.Condition) ITPermissionsLogDo
	Order(conds ...field.Expr) ITPermissionsLogDo
	Distinct(cols ...field.Expr) ITPermissionsLogDo
	Omit(cols ...field.Expr) ITPermissionsLogDo
	Join(table schema.Tabler, on ...field.Expr) ITPermissionsLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITPermissionsLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITPermissionsLogDo
	Group(cols ...field.Expr) ITPermissionsLogDo
	Having(conds ...gen.Condition) ITPermissionsLogDo
	Limit(limit int) ITPermissionsLogDo
	Offset(offset int) ITPermissionsLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITPermissionsLogDo
	Unscoped() ITPermissionsLogDo
	Create(values ...*model.TPermissionsLog) error
	CreateInBatches(values []*model.TPermissionsLog, batchSize int) error
	Save(values ...*model.TPermissionsLog) error
	First() (*model.TPermissionsLog, error)
	Take() (*model.TPermissionsLog, error)
	Last() (*model.TPermissionsLog, error)
	Find() ([]*model.TPermissionsLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPermissionsLog, err error)
	FindInBatches(result *[]*model.TPermissionsLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TPermissionsLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITPermissionsLogDo
	Assign(attrs ...field.AssignExpr) ITPermissionsLogDo
	Joins(fields ...field.RelationField) ITPermissionsLogDo
	Preload(fields ...field.RelationField) ITPermissionsLogDo
	FirstOrInit() (*model.TPermissionsLog, error)
	FirstOrCreate() (*model.TPermissionsLog, error)
	FindByPage(offset int, limit int) (result []*model.TPermissionsLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITPermissionsLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tPermissionsLogDo) Debug() ITPermissionsLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tPermissionsLogDo) WithContext(ctx context.Context) ITPermissionsLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPermissionsLogDo) ReadDB() ITPermissionsLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t tPermissionsLogDo) WriteDB() ITPermissionsLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t tPermissionsLogDo) Clauses(conds ...clause.Expression) ITPermissionsLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPermissionsLogDo) Returning(value interface{}, columns ...string) ITPermissionsLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPermissionsLogDo) Not(conds ...gen.Condition) ITPermissionsLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPermissionsLogDo) Or(conds ...gen.Condition) ITPermissionsLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPermissionsLogDo) Select(conds ...field.Expr) ITPermissionsLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPermissionsLogDo) Where(conds ...gen.Condition) ITPermissionsLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPermissionsLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITPermissionsLogDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPermissionsLogDo) Order(conds ...field.Expr) ITPermissionsLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPermissionsLogDo) Distinct(cols ...field.Expr) ITPermissionsLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPermissionsLogDo) Omit(cols ...field.Expr) ITPermissionsLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPermissionsLogDo) Join(table schema.Tabler, on ...field.Expr) ITPermissionsLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPermissionsLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITPermissionsLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPermissionsLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ITPermissionsLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPermissionsLogDo) Group(cols ...field.Expr) ITPermissionsLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPermissionsLogDo) Having(conds ...gen.Condition) ITPermissionsLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPermissionsLogDo) Limit(limit int) ITPermissionsLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPermissionsLogDo) Offset(offset int) ITPermissionsLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPermissionsLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITPermissionsLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPermissionsLogDo) Unscoped() ITPermissionsLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPermissionsLogDo) Create(values ...*model.TPermissionsLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPermissionsLogDo) CreateInBatches(values []*model.TPermissionsLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPermissionsLogDo) Save(values ...*model.TPermissionsLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPermissionsLogDo) First() (*model.TPermissionsLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermissionsLog), nil
	}
}

func (t tPermissionsLogDo) Take() (*model.TPermissionsLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermissionsLog), nil
	}
}

func (t tPermissionsLogDo) Last() (*model.TPermissionsLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermissionsLog), nil
	}
}

func (t tPermissionsLogDo) Find() ([]*model.TPermissionsLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPermissionsLog), err
}

func (t tPermissionsLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPermissionsLog, err error) {
	buf := make([]*model.TPermissionsLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPermissionsLogDo) FindInBatches(result *[]*model.TPermissionsLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPermissionsLogDo) Attrs(attrs ...field.AssignExpr) ITPermissionsLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPermissionsLogDo) Assign(attrs ...field.AssignExpr) ITPermissionsLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPermissionsLogDo) Joins(fields ...field.RelationField) ITPermissionsLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tPermissionsLogDo) Preload(fields ...field.RelationField) ITPermissionsLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tPermissionsLogDo) FirstOrInit() (*model.TPermissionsLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermissionsLog), nil
	}
}

func (t tPermissionsLogDo) FirstOrCreate() (*model.TPermissionsLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermissionsLog), nil
	}
}

func (t tPermissionsLogDo) FindByPage(offset int, limit int) (result []*model.TPermissionsLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPermissionsLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tPermissionsLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tPermissionsLogDo) Delete(models ...*model.TPermissionsLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tPermissionsLogDo) withDO(do gen.Dao) *tPermissionsLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
