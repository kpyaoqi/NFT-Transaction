// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"yqnft/NFTManage/models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newNftUserReal(db *gorm.DB) nftUserReal {
	_nftUserReal := nftUserReal{}

	_nftUserReal.nftUserRealDo.UseDB(db)
	_nftUserReal.nftUserRealDo.UseModel(&model.NftUserReal{})

	tableName := _nftUserReal.nftUserRealDo.TableName()
	_nftUserReal.ALL = field.NewAsterisk(tableName)
	_nftUserReal.UserID = field.NewString(tableName, "userId")
	_nftUserReal.IdentityNum = field.NewString(tableName, "identityNum")
	_nftUserReal.Name = field.NewString(tableName, "name")
	_nftUserReal.Moble = field.NewString(tableName, "moble")
	_nftUserReal.Address = field.NewString(tableName, "address")
	_nftUserReal.FrontPath = field.NewString(tableName, "frontPath")
	_nftUserReal.BackPath = field.NewString(tableName, "backPath")
	_nftUserReal.CreateTime = field.NewTime(tableName, "createTime")
	_nftUserReal.UpdateTime = field.NewTime(tableName, "updateTime")
	_nftUserReal.Bak1 = field.NewString(tableName, "bak1")
	_nftUserReal.Bak2 = field.NewString(tableName, "bak2")
	_nftUserReal.Bak3 = field.NewString(tableName, "bak3")

	_nftUserReal.fillFieldMap()

	return _nftUserReal
}

type nftUserReal struct {
	nftUserRealDo nftUserRealDo

	ALL         field.Asterisk
	UserID      field.String // 用户标识
	IdentityNum field.String // 身份证号
	Name        field.String // 姓名
	Moble       field.String // 手机号
	Address     field.String // 现居住址
	FrontPath   field.String // 身份证正面图片
	BackPath    field.String // 身份证反面图片
	CreateTime  field.Time
	UpdateTime  field.Time
	Bak1        field.String
	Bak2        field.String
	Bak3        field.String

	fieldMap map[string]field.Expr
}

func (n nftUserReal) Table(newTableName string) *nftUserReal {
	n.nftUserRealDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nftUserReal) As(alias string) *nftUserReal {
	n.nftUserRealDo.DO = *(n.nftUserRealDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nftUserReal) updateTableName(table string) *nftUserReal {
	n.ALL = field.NewAsterisk(table)
	n.UserID = field.NewString(table, "userId")
	n.IdentityNum = field.NewString(table, "identityNum")
	n.Name = field.NewString(table, "name")
	n.Moble = field.NewString(table, "moble")
	n.Address = field.NewString(table, "address")
	n.FrontPath = field.NewString(table, "frontPath")
	n.BackPath = field.NewString(table, "backPath")
	n.CreateTime = field.NewTime(table, "createTime")
	n.UpdateTime = field.NewTime(table, "updateTime")
	n.Bak1 = field.NewString(table, "bak1")
	n.Bak2 = field.NewString(table, "bak2")
	n.Bak3 = field.NewString(table, "bak3")

	n.fillFieldMap()

	return n
}

func (n *nftUserReal) WithContext(ctx context.Context) INftUserRealDo {
	return n.nftUserRealDo.WithContext(ctx)
}

func (n nftUserReal) TableName() string { return n.nftUserRealDo.TableName() }

func (n nftUserReal) Alias() string { return n.nftUserRealDo.Alias() }

func (n *nftUserReal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nftUserReal) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 12)
	n.fieldMap["userId"] = n.UserID
	n.fieldMap["identityNum"] = n.IdentityNum
	n.fieldMap["name"] = n.Name
	n.fieldMap["moble"] = n.Moble
	n.fieldMap["address"] = n.Address
	n.fieldMap["frontPath"] = n.FrontPath
	n.fieldMap["backPath"] = n.BackPath
	n.fieldMap["createTime"] = n.CreateTime
	n.fieldMap["updateTime"] = n.UpdateTime
	n.fieldMap["bak1"] = n.Bak1
	n.fieldMap["bak2"] = n.Bak2
	n.fieldMap["bak3"] = n.Bak3
}

func (n nftUserReal) clone(db *gorm.DB) nftUserReal {
	n.nftUserRealDo.ReplaceDB(db)
	return n
}

type nftUserRealDo struct{ gen.DO }

type INftUserRealDo interface {
	gen.SubQuery
	Debug() INftUserRealDo
	WithContext(ctx context.Context) INftUserRealDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INftUserRealDo
	Not(conds ...gen.Condition) INftUserRealDo
	Or(conds ...gen.Condition) INftUserRealDo
	Select(conds ...field.Expr) INftUserRealDo
	Where(conds ...gen.Condition) INftUserRealDo
	Order(conds ...field.Expr) INftUserRealDo
	Distinct(cols ...field.Expr) INftUserRealDo
	Omit(cols ...field.Expr) INftUserRealDo
	Join(table schema.Tabler, on ...field.Expr) INftUserRealDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INftUserRealDo
	RightJoin(table schema.Tabler, on ...field.Expr) INftUserRealDo
	Group(cols ...field.Expr) INftUserRealDo
	Having(conds ...gen.Condition) INftUserRealDo
	Limit(limit int) INftUserRealDo
	Offset(offset int) INftUserRealDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INftUserRealDo
	Unscoped() INftUserRealDo
	Create(values ...*model.NftUserReal) error
	CreateInBatches(values []*model.NftUserReal, batchSize int) error
	Save(values ...*model.NftUserReal) error
	First() (*model.NftUserReal, error)
	Take() (*model.NftUserReal, error)
	Last() (*model.NftUserReal, error)
	Find() ([]*model.NftUserReal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NftUserReal, err error)
	FindInBatches(result *[]*model.NftUserReal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NftUserReal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INftUserRealDo
	Assign(attrs ...field.AssignExpr) INftUserRealDo
	Joins(fields ...field.RelationField) INftUserRealDo
	Preload(fields ...field.RelationField) INftUserRealDo
	FirstOrInit() (*model.NftUserReal, error)
	FirstOrCreate() (*model.NftUserReal, error)
	FindByPage(offset int, limit int) (result []*model.NftUserReal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INftUserRealDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nftUserRealDo) Debug() INftUserRealDo {
	return n.withDO(n.DO.Debug())
}

func (n nftUserRealDo) WithContext(ctx context.Context) INftUserRealDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nftUserRealDo) ReadDB() INftUserRealDo {
	return n.Clauses(dbresolver.Read)
}

func (n nftUserRealDo) WriteDB() INftUserRealDo {
	return n.Clauses(dbresolver.Write)
}

func (n nftUserRealDo) Clauses(conds ...clause.Expression) INftUserRealDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nftUserRealDo) Returning(value interface{}, columns ...string) INftUserRealDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nftUserRealDo) Not(conds ...gen.Condition) INftUserRealDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nftUserRealDo) Or(conds ...gen.Condition) INftUserRealDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nftUserRealDo) Select(conds ...field.Expr) INftUserRealDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nftUserRealDo) Where(conds ...gen.Condition) INftUserRealDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nftUserRealDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) INftUserRealDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n nftUserRealDo) Order(conds ...field.Expr) INftUserRealDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nftUserRealDo) Distinct(cols ...field.Expr) INftUserRealDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nftUserRealDo) Omit(cols ...field.Expr) INftUserRealDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nftUserRealDo) Join(table schema.Tabler, on ...field.Expr) INftUserRealDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nftUserRealDo) LeftJoin(table schema.Tabler, on ...field.Expr) INftUserRealDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nftUserRealDo) RightJoin(table schema.Tabler, on ...field.Expr) INftUserRealDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nftUserRealDo) Group(cols ...field.Expr) INftUserRealDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nftUserRealDo) Having(conds ...gen.Condition) INftUserRealDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nftUserRealDo) Limit(limit int) INftUserRealDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nftUserRealDo) Offset(offset int) INftUserRealDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nftUserRealDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INftUserRealDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nftUserRealDo) Unscoped() INftUserRealDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nftUserRealDo) Create(values ...*model.NftUserReal) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nftUserRealDo) CreateInBatches(values []*model.NftUserReal, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nftUserRealDo) Save(values ...*model.NftUserReal) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nftUserRealDo) First() (*model.NftUserReal, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftUserReal), nil
	}
}

func (n nftUserRealDo) Take() (*model.NftUserReal, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftUserReal), nil
	}
}

func (n nftUserRealDo) Last() (*model.NftUserReal, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftUserReal), nil
	}
}

func (n nftUserRealDo) Find() ([]*model.NftUserReal, error) {
	result, err := n.DO.Find()
	return result.([]*model.NftUserReal), err
}

func (n nftUserRealDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NftUserReal, err error) {
	buf := make([]*model.NftUserReal, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nftUserRealDo) FindInBatches(result *[]*model.NftUserReal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nftUserRealDo) Attrs(attrs ...field.AssignExpr) INftUserRealDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nftUserRealDo) Assign(attrs ...field.AssignExpr) INftUserRealDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nftUserRealDo) Joins(fields ...field.RelationField) INftUserRealDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nftUserRealDo) Preload(fields ...field.RelationField) INftUserRealDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nftUserRealDo) FirstOrInit() (*model.NftUserReal, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftUserReal), nil
	}
}

func (n nftUserRealDo) FirstOrCreate() (*model.NftUserReal, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NftUserReal), nil
	}
}

func (n nftUserRealDo) FindByPage(offset int, limit int) (result []*model.NftUserReal, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nftUserRealDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nftUserRealDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nftUserRealDo) Delete(models ...*model.NftUserReal) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nftUserRealDo) withDO(do gen.Dao) *nftUserRealDo {
	n.DO = *do.(*gen.DO)
	return n
}
