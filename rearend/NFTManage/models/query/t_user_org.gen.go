// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"yqnft/NFTManage/models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTUserOrg(db *gorm.DB) tUserOrg {
	_tUserOrg := tUserOrg{}

	_tUserOrg.tUserOrgDo.UseDB(db)
	_tUserOrg.tUserOrgDo.UseModel(&model.TUserOrg{})

	tableName := _tUserOrg.tUserOrgDo.TableName()
	_tUserOrg.ALL = field.NewAsterisk(tableName)
	_tUserOrg.ID = field.NewString(tableName, "id")
	_tUserOrg.UserID = field.NewString(tableName, "userId")
	_tUserOrg.OrgID = field.NewString(tableName, "orgId")
	_tUserOrg.ManagerType = field.NewInt64(tableName, "managerType")
	_tUserOrg.Bak1 = field.NewString(tableName, "bak1")
	_tUserOrg.Bak2 = field.NewString(tableName, "bak2")
	_tUserOrg.Bak3 = field.NewString(tableName, "bak3")
	_tUserOrg.Bak4 = field.NewString(tableName, "bak4")
	_tUserOrg.Bak5 = field.NewString(tableName, "bak5")
	_tUserOrg.CreateTime = field.NewTime(tableName, "createTime")
	_tUserOrg.CreateUserID = field.NewString(tableName, "createUserId")
	_tUserOrg.UpdateTime = field.NewTime(tableName, "updateTime")
	_tUserOrg.UpdateUserID = field.NewString(tableName, "updateUserId")

	_tUserOrg.fillFieldMap()

	return _tUserOrg
}

type tUserOrg struct {
	tUserOrgDo tUserOrgDo

	ALL          field.Asterisk
	ID           field.String // 编号
	UserID       field.String // 用户编号
	OrgID        field.String // 机构编号
	ManagerType  field.Int64  // 0会员,1员工,2主管
	Bak1         field.String
	Bak2         field.String
	Bak3         field.String
	Bak4         field.String
	Bak5         field.String
	CreateTime   field.Time
	CreateUserID field.String
	UpdateTime   field.Time
	UpdateUserID field.String

	fieldMap map[string]field.Expr
}

func (t tUserOrg) Table(newTableName string) *tUserOrg {
	t.tUserOrgDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUserOrg) As(alias string) *tUserOrg {
	t.tUserOrgDo.DO = *(t.tUserOrgDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUserOrg) updateTableName(table string) *tUserOrg {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.UserID = field.NewString(table, "userId")
	t.OrgID = field.NewString(table, "orgId")
	t.ManagerType = field.NewInt64(table, "managerType")
	t.Bak1 = field.NewString(table, "bak1")
	t.Bak2 = field.NewString(table, "bak2")
	t.Bak3 = field.NewString(table, "bak3")
	t.Bak4 = field.NewString(table, "bak4")
	t.Bak5 = field.NewString(table, "bak5")
	t.CreateTime = field.NewTime(table, "createTime")
	t.CreateUserID = field.NewString(table, "createUserId")
	t.UpdateTime = field.NewTime(table, "updateTime")
	t.UpdateUserID = field.NewString(table, "updateUserId")

	t.fillFieldMap()

	return t
}

func (t *tUserOrg) WithContext(ctx context.Context) ITUserOrgDo { return t.tUserOrgDo.WithContext(ctx) }

func (t tUserOrg) TableName() string { return t.tUserOrgDo.TableName() }

func (t tUserOrg) Alias() string { return t.tUserOrgDo.Alias() }

func (t *tUserOrg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUserOrg) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.ID
	t.fieldMap["userId"] = t.UserID
	t.fieldMap["orgId"] = t.OrgID
	t.fieldMap["managerType"] = t.ManagerType
	t.fieldMap["bak1"] = t.Bak1
	t.fieldMap["bak2"] = t.Bak2
	t.fieldMap["bak3"] = t.Bak3
	t.fieldMap["bak4"] = t.Bak4
	t.fieldMap["bak5"] = t.Bak5
	t.fieldMap["createTime"] = t.CreateTime
	t.fieldMap["createUserId"] = t.CreateUserID
	t.fieldMap["updateTime"] = t.UpdateTime
	t.fieldMap["updateUserId"] = t.UpdateUserID
}

func (t tUserOrg) clone(db *gorm.DB) tUserOrg {
	t.tUserOrgDo.ReplaceDB(db)
	return t
}

type tUserOrgDo struct{ gen.DO }

type ITUserOrgDo interface {
	gen.SubQuery
	Debug() ITUserOrgDo
	WithContext(ctx context.Context) ITUserOrgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITUserOrgDo
	Not(conds ...gen.Condition) ITUserOrgDo
	Or(conds ...gen.Condition) ITUserOrgDo
	Select(conds ...field.Expr) ITUserOrgDo
	Where(conds ...gen.Condition) ITUserOrgDo
	Order(conds ...field.Expr) ITUserOrgDo
	Distinct(cols ...field.Expr) ITUserOrgDo
	Omit(cols ...field.Expr) ITUserOrgDo
	Join(table schema.Tabler, on ...field.Expr) ITUserOrgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITUserOrgDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITUserOrgDo
	Group(cols ...field.Expr) ITUserOrgDo
	Having(conds ...gen.Condition) ITUserOrgDo
	Limit(limit int) ITUserOrgDo
	Offset(offset int) ITUserOrgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITUserOrgDo
	Unscoped() ITUserOrgDo
	Create(values ...*model.TUserOrg) error
	CreateInBatches(values []*model.TUserOrg, batchSize int) error
	Save(values ...*model.TUserOrg) error
	First() (*model.TUserOrg, error)
	Take() (*model.TUserOrg, error)
	Last() (*model.TUserOrg, error)
	Find() ([]*model.TUserOrg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUserOrg, err error)
	FindInBatches(result *[]*model.TUserOrg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TUserOrg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITUserOrgDo
	Assign(attrs ...field.AssignExpr) ITUserOrgDo
	Joins(fields ...field.RelationField) ITUserOrgDo
	Preload(fields ...field.RelationField) ITUserOrgDo
	FirstOrInit() (*model.TUserOrg, error)
	FirstOrCreate() (*model.TUserOrg, error)
	FindByPage(offset int, limit int) (result []*model.TUserOrg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITUserOrgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tUserOrgDo) Debug() ITUserOrgDo {
	return t.withDO(t.DO.Debug())
}

func (t tUserOrgDo) WithContext(ctx context.Context) ITUserOrgDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUserOrgDo) ReadDB() ITUserOrgDo {
	return t.Clauses(dbresolver.Read)
}

func (t tUserOrgDo) WriteDB() ITUserOrgDo {
	return t.Clauses(dbresolver.Write)
}

func (t tUserOrgDo) Clauses(conds ...clause.Expression) ITUserOrgDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUserOrgDo) Returning(value interface{}, columns ...string) ITUserOrgDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUserOrgDo) Not(conds ...gen.Condition) ITUserOrgDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUserOrgDo) Or(conds ...gen.Condition) ITUserOrgDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUserOrgDo) Select(conds ...field.Expr) ITUserOrgDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUserOrgDo) Where(conds ...gen.Condition) ITUserOrgDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUserOrgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITUserOrgDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUserOrgDo) Order(conds ...field.Expr) ITUserOrgDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUserOrgDo) Distinct(cols ...field.Expr) ITUserOrgDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUserOrgDo) Omit(cols ...field.Expr) ITUserOrgDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUserOrgDo) Join(table schema.Tabler, on ...field.Expr) ITUserOrgDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUserOrgDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITUserOrgDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUserOrgDo) RightJoin(table schema.Tabler, on ...field.Expr) ITUserOrgDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUserOrgDo) Group(cols ...field.Expr) ITUserOrgDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUserOrgDo) Having(conds ...gen.Condition) ITUserOrgDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUserOrgDo) Limit(limit int) ITUserOrgDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUserOrgDo) Offset(offset int) ITUserOrgDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUserOrgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITUserOrgDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUserOrgDo) Unscoped() ITUserOrgDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUserOrgDo) Create(values ...*model.TUserOrg) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUserOrgDo) CreateInBatches(values []*model.TUserOrg, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUserOrgDo) Save(values ...*model.TUserOrg) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUserOrgDo) First() (*model.TUserOrg, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserOrg), nil
	}
}

func (t tUserOrgDo) Take() (*model.TUserOrg, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserOrg), nil
	}
}

func (t tUserOrgDo) Last() (*model.TUserOrg, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserOrg), nil
	}
}

func (t tUserOrgDo) Find() ([]*model.TUserOrg, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUserOrg), err
}

func (t tUserOrgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUserOrg, err error) {
	buf := make([]*model.TUserOrg, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUserOrgDo) FindInBatches(result *[]*model.TUserOrg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUserOrgDo) Attrs(attrs ...field.AssignExpr) ITUserOrgDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUserOrgDo) Assign(attrs ...field.AssignExpr) ITUserOrgDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUserOrgDo) Joins(fields ...field.RelationField) ITUserOrgDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tUserOrgDo) Preload(fields ...field.RelationField) ITUserOrgDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tUserOrgDo) FirstOrInit() (*model.TUserOrg, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserOrg), nil
	}
}

func (t tUserOrgDo) FirstOrCreate() (*model.TUserOrg, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserOrg), nil
	}
}

func (t tUserOrgDo) FindByPage(offset int, limit int) (result []*model.TUserOrg, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUserOrgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tUserOrgDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tUserOrgDo) Delete(models ...*model.TUserOrg) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tUserOrgDo) withDO(do gen.Dao) *tUserOrgDo {
	t.DO = *do.(*gen.DO)
	return t
}
