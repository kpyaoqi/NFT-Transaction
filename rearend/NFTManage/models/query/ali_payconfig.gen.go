// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"yqnft/NFTManage/models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAliPayconfig(db *gorm.DB) aliPayconfig {
	_aliPayconfig := aliPayconfig{}

	_aliPayconfig.aliPayconfigDo.UseDB(db)
	_aliPayconfig.aliPayconfigDo.UseModel(&model.AliPayconfig{})

	tableName := _aliPayconfig.aliPayconfigDo.TableName()
	_aliPayconfig.ALL = field.NewAsterisk(tableName)
	_aliPayconfig.ID = field.NewString(tableName, "id")
	_aliPayconfig.PrivateKey = field.NewString(tableName, "privateKey")
	_aliPayconfig.AliPayPublicKey = field.NewString(tableName, "aliPayPublicKey")
	_aliPayconfig.AppID = field.NewString(tableName, "appId")
	_aliPayconfig.ServiceURL = field.NewString(tableName, "serviceUrl")
	_aliPayconfig.Charset = field.NewString(tableName, "charset")
	_aliPayconfig.SignType = field.NewString(tableName, "signType")
	_aliPayconfig.Format = field.NewString(tableName, "format")
	_aliPayconfig.CertPath = field.NewString(tableName, "certPath")
	_aliPayconfig.AlipayPublicCertPath = field.NewString(tableName, "alipayPublicCertPath")
	_aliPayconfig.RootCertPath = field.NewString(tableName, "rootCertPath")
	_aliPayconfig.EncryptType = field.NewString(tableName, "encryptType")
	_aliPayconfig.AesKey = field.NewString(tableName, "aesKey")

	_aliPayconfig.fillFieldMap()

	return _aliPayconfig
}

type aliPayconfig struct {
	aliPayconfigDo aliPayconfigDo

	ALL                  field.Asterisk
	ID                   field.String
	PrivateKey           field.String
	AliPayPublicKey      field.String
	AppID                field.String
	ServiceURL           field.String
	Charset              field.String
	SignType             field.String
	Format               field.String
	CertPath             field.String
	AlipayPublicCertPath field.String
	RootCertPath         field.String
	EncryptType          field.String
	AesKey               field.String

	fieldMap map[string]field.Expr
}

func (a aliPayconfig) Table(newTableName string) *aliPayconfig {
	a.aliPayconfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aliPayconfig) As(alias string) *aliPayconfig {
	a.aliPayconfigDo.DO = *(a.aliPayconfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aliPayconfig) updateTableName(table string) *aliPayconfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.PrivateKey = field.NewString(table, "privateKey")
	a.AliPayPublicKey = field.NewString(table, "aliPayPublicKey")
	a.AppID = field.NewString(table, "appId")
	a.ServiceURL = field.NewString(table, "serviceUrl")
	a.Charset = field.NewString(table, "charset")
	a.SignType = field.NewString(table, "signType")
	a.Format = field.NewString(table, "format")
	a.CertPath = field.NewString(table, "certPath")
	a.AlipayPublicCertPath = field.NewString(table, "alipayPublicCertPath")
	a.RootCertPath = field.NewString(table, "rootCertPath")
	a.EncryptType = field.NewString(table, "encryptType")
	a.AesKey = field.NewString(table, "aesKey")

	a.fillFieldMap()

	return a
}

func (a *aliPayconfig) WithContext(ctx context.Context) IAliPayconfigDo {
	return a.aliPayconfigDo.WithContext(ctx)
}

func (a aliPayconfig) TableName() string { return a.aliPayconfigDo.TableName() }

func (a aliPayconfig) Alias() string { return a.aliPayconfigDo.Alias() }

func (a *aliPayconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aliPayconfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["privateKey"] = a.PrivateKey
	a.fieldMap["aliPayPublicKey"] = a.AliPayPublicKey
	a.fieldMap["appId"] = a.AppID
	a.fieldMap["serviceUrl"] = a.ServiceURL
	a.fieldMap["charset"] = a.Charset
	a.fieldMap["signType"] = a.SignType
	a.fieldMap["format"] = a.Format
	a.fieldMap["certPath"] = a.CertPath
	a.fieldMap["alipayPublicCertPath"] = a.AlipayPublicCertPath
	a.fieldMap["rootCertPath"] = a.RootCertPath
	a.fieldMap["encryptType"] = a.EncryptType
	a.fieldMap["aesKey"] = a.AesKey
}

func (a aliPayconfig) clone(db *gorm.DB) aliPayconfig {
	a.aliPayconfigDo.ReplaceDB(db)
	return a
}

type aliPayconfigDo struct{ gen.DO }

type IAliPayconfigDo interface {
	gen.SubQuery
	Debug() IAliPayconfigDo
	WithContext(ctx context.Context) IAliPayconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAliPayconfigDo
	Not(conds ...gen.Condition) IAliPayconfigDo
	Or(conds ...gen.Condition) IAliPayconfigDo
	Select(conds ...field.Expr) IAliPayconfigDo
	Where(conds ...gen.Condition) IAliPayconfigDo
	Order(conds ...field.Expr) IAliPayconfigDo
	Distinct(cols ...field.Expr) IAliPayconfigDo
	Omit(cols ...field.Expr) IAliPayconfigDo
	Join(table schema.Tabler, on ...field.Expr) IAliPayconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAliPayconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAliPayconfigDo
	Group(cols ...field.Expr) IAliPayconfigDo
	Having(conds ...gen.Condition) IAliPayconfigDo
	Limit(limit int) IAliPayconfigDo
	Offset(offset int) IAliPayconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAliPayconfigDo
	Unscoped() IAliPayconfigDo
	Create(values ...*model.AliPayconfig) error
	CreateInBatches(values []*model.AliPayconfig, batchSize int) error
	Save(values ...*model.AliPayconfig) error
	First() (*model.AliPayconfig, error)
	Take() (*model.AliPayconfig, error)
	Last() (*model.AliPayconfig, error)
	Find() ([]*model.AliPayconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AliPayconfig, err error)
	FindInBatches(result *[]*model.AliPayconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AliPayconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAliPayconfigDo
	Assign(attrs ...field.AssignExpr) IAliPayconfigDo
	Joins(fields ...field.RelationField) IAliPayconfigDo
	Preload(fields ...field.RelationField) IAliPayconfigDo
	FirstOrInit() (*model.AliPayconfig, error)
	FirstOrCreate() (*model.AliPayconfig, error)
	FindByPage(offset int, limit int) (result []*model.AliPayconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAliPayconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aliPayconfigDo) Debug() IAliPayconfigDo {
	return a.withDO(a.DO.Debug())
}

func (a aliPayconfigDo) WithContext(ctx context.Context) IAliPayconfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aliPayconfigDo) ReadDB() IAliPayconfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a aliPayconfigDo) WriteDB() IAliPayconfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a aliPayconfigDo) Clauses(conds ...clause.Expression) IAliPayconfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aliPayconfigDo) Returning(value interface{}, columns ...string) IAliPayconfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aliPayconfigDo) Not(conds ...gen.Condition) IAliPayconfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aliPayconfigDo) Or(conds ...gen.Condition) IAliPayconfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aliPayconfigDo) Select(conds ...field.Expr) IAliPayconfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aliPayconfigDo) Where(conds ...gen.Condition) IAliPayconfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aliPayconfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAliPayconfigDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a aliPayconfigDo) Order(conds ...field.Expr) IAliPayconfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aliPayconfigDo) Distinct(cols ...field.Expr) IAliPayconfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aliPayconfigDo) Omit(cols ...field.Expr) IAliPayconfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aliPayconfigDo) Join(table schema.Tabler, on ...field.Expr) IAliPayconfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aliPayconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAliPayconfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aliPayconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IAliPayconfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aliPayconfigDo) Group(cols ...field.Expr) IAliPayconfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aliPayconfigDo) Having(conds ...gen.Condition) IAliPayconfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aliPayconfigDo) Limit(limit int) IAliPayconfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aliPayconfigDo) Offset(offset int) IAliPayconfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aliPayconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAliPayconfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aliPayconfigDo) Unscoped() IAliPayconfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aliPayconfigDo) Create(values ...*model.AliPayconfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aliPayconfigDo) CreateInBatches(values []*model.AliPayconfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aliPayconfigDo) Save(values ...*model.AliPayconfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aliPayconfigDo) First() (*model.AliPayconfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AliPayconfig), nil
	}
}

func (a aliPayconfigDo) Take() (*model.AliPayconfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AliPayconfig), nil
	}
}

func (a aliPayconfigDo) Last() (*model.AliPayconfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AliPayconfig), nil
	}
}

func (a aliPayconfigDo) Find() ([]*model.AliPayconfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.AliPayconfig), err
}

func (a aliPayconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AliPayconfig, err error) {
	buf := make([]*model.AliPayconfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aliPayconfigDo) FindInBatches(result *[]*model.AliPayconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aliPayconfigDo) Attrs(attrs ...field.AssignExpr) IAliPayconfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aliPayconfigDo) Assign(attrs ...field.AssignExpr) IAliPayconfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aliPayconfigDo) Joins(fields ...field.RelationField) IAliPayconfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aliPayconfigDo) Preload(fields ...field.RelationField) IAliPayconfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aliPayconfigDo) FirstOrInit() (*model.AliPayconfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AliPayconfig), nil
	}
}

func (a aliPayconfigDo) FirstOrCreate() (*model.AliPayconfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AliPayconfig), nil
	}
}

func (a aliPayconfigDo) FindByPage(offset int, limit int) (result []*model.AliPayconfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aliPayconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aliPayconfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aliPayconfigDo) Delete(models ...*model.AliPayconfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aliPayconfigDo) withDO(do gen.Dao) *aliPayconfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
