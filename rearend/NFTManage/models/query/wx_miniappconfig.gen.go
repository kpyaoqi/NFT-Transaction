// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"yqnft/NFTManage/models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWxMiniappconfig(db *gorm.DB) wxMiniappconfig {
	_wxMiniappconfig := wxMiniappconfig{}

	_wxMiniappconfig.wxMiniappconfigDo.UseDB(db)
	_wxMiniappconfig.wxMiniappconfigDo.UseModel(&model.WxMiniappconfig{})

	tableName := _wxMiniappconfig.wxMiniappconfigDo.TableName()
	_wxMiniappconfig.ALL = field.NewAsterisk(tableName)
	_wxMiniappconfig.ID = field.NewString(tableName, "id")
	_wxMiniappconfig.OrgID = field.NewString(tableName, "orgId")
	_wxMiniappconfig.AppID = field.NewString(tableName, "appId")
	_wxMiniappconfig.Secret = field.NewString(tableName, "secret")
	_wxMiniappconfig.PlanID = field.NewString(tableName, "planId")
	_wxMiniappconfig.RequestSerial = field.NewString(tableName, "requestSerial")
	_wxMiniappconfig.Active = field.NewInt64(tableName, "active")
	_wxMiniappconfig.Bak1 = field.NewString(tableName, "bak1")
	_wxMiniappconfig.Bak2 = field.NewString(tableName, "bak2")
	_wxMiniappconfig.Bak3 = field.NewString(tableName, "bak3")
	_wxMiniappconfig.Bak4 = field.NewString(tableName, "bak4")
	_wxMiniappconfig.Bak5 = field.NewString(tableName, "bak5")

	_wxMiniappconfig.fillFieldMap()

	return _wxMiniappconfig
}

type wxMiniappconfig struct {
	wxMiniappconfigDo wxMiniappconfigDo

	ALL           field.Asterisk
	ID            field.String // 主键id
	OrgID         field.String // 站点Id
	AppID         field.String // 开发者Id
	Secret        field.String // 应用密钥
	PlanID        field.String // 签约模板Id
	RequestSerial field.String // 签约请求序列号
	Active        field.Int64  // 状态 0不可用,1可用
	Bak1          field.String
	Bak2          field.String
	Bak3          field.String
	Bak4          field.String
	Bak5          field.String

	fieldMap map[string]field.Expr
}

func (w wxMiniappconfig) Table(newTableName string) *wxMiniappconfig {
	w.wxMiniappconfigDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wxMiniappconfig) As(alias string) *wxMiniappconfig {
	w.wxMiniappconfigDo.DO = *(w.wxMiniappconfigDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wxMiniappconfig) updateTableName(table string) *wxMiniappconfig {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewString(table, "id")
	w.OrgID = field.NewString(table, "orgId")
	w.AppID = field.NewString(table, "appId")
	w.Secret = field.NewString(table, "secret")
	w.PlanID = field.NewString(table, "planId")
	w.RequestSerial = field.NewString(table, "requestSerial")
	w.Active = field.NewInt64(table, "active")
	w.Bak1 = field.NewString(table, "bak1")
	w.Bak2 = field.NewString(table, "bak2")
	w.Bak3 = field.NewString(table, "bak3")
	w.Bak4 = field.NewString(table, "bak4")
	w.Bak5 = field.NewString(table, "bak5")

	w.fillFieldMap()

	return w
}

func (w *wxMiniappconfig) WithContext(ctx context.Context) IWxMiniappconfigDo {
	return w.wxMiniappconfigDo.WithContext(ctx)
}

func (w wxMiniappconfig) TableName() string { return w.wxMiniappconfigDo.TableName() }

func (w wxMiniappconfig) Alias() string { return w.wxMiniappconfigDo.Alias() }

func (w *wxMiniappconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wxMiniappconfig) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 12)
	w.fieldMap["id"] = w.ID
	w.fieldMap["orgId"] = w.OrgID
	w.fieldMap["appId"] = w.AppID
	w.fieldMap["secret"] = w.Secret
	w.fieldMap["planId"] = w.PlanID
	w.fieldMap["requestSerial"] = w.RequestSerial
	w.fieldMap["active"] = w.Active
	w.fieldMap["bak1"] = w.Bak1
	w.fieldMap["bak2"] = w.Bak2
	w.fieldMap["bak3"] = w.Bak3
	w.fieldMap["bak4"] = w.Bak4
	w.fieldMap["bak5"] = w.Bak5
}

func (w wxMiniappconfig) clone(db *gorm.DB) wxMiniappconfig {
	w.wxMiniappconfigDo.ReplaceDB(db)
	return w
}

type wxMiniappconfigDo struct{ gen.DO }

type IWxMiniappconfigDo interface {
	gen.SubQuery
	Debug() IWxMiniappconfigDo
	WithContext(ctx context.Context) IWxMiniappconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWxMiniappconfigDo
	Not(conds ...gen.Condition) IWxMiniappconfigDo
	Or(conds ...gen.Condition) IWxMiniappconfigDo
	Select(conds ...field.Expr) IWxMiniappconfigDo
	Where(conds ...gen.Condition) IWxMiniappconfigDo
	Order(conds ...field.Expr) IWxMiniappconfigDo
	Distinct(cols ...field.Expr) IWxMiniappconfigDo
	Omit(cols ...field.Expr) IWxMiniappconfigDo
	Join(table schema.Tabler, on ...field.Expr) IWxMiniappconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWxMiniappconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWxMiniappconfigDo
	Group(cols ...field.Expr) IWxMiniappconfigDo
	Having(conds ...gen.Condition) IWxMiniappconfigDo
	Limit(limit int) IWxMiniappconfigDo
	Offset(offset int) IWxMiniappconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWxMiniappconfigDo
	Unscoped() IWxMiniappconfigDo
	Create(values ...*model.WxMiniappconfig) error
	CreateInBatches(values []*model.WxMiniappconfig, batchSize int) error
	Save(values ...*model.WxMiniappconfig) error
	First() (*model.WxMiniappconfig, error)
	Take() (*model.WxMiniappconfig, error)
	Last() (*model.WxMiniappconfig, error)
	Find() ([]*model.WxMiniappconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxMiniappconfig, err error)
	FindInBatches(result *[]*model.WxMiniappconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WxMiniappconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWxMiniappconfigDo
	Assign(attrs ...field.AssignExpr) IWxMiniappconfigDo
	Joins(fields ...field.RelationField) IWxMiniappconfigDo
	Preload(fields ...field.RelationField) IWxMiniappconfigDo
	FirstOrInit() (*model.WxMiniappconfig, error)
	FirstOrCreate() (*model.WxMiniappconfig, error)
	FindByPage(offset int, limit int) (result []*model.WxMiniappconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWxMiniappconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wxMiniappconfigDo) Debug() IWxMiniappconfigDo {
	return w.withDO(w.DO.Debug())
}

func (w wxMiniappconfigDo) WithContext(ctx context.Context) IWxMiniappconfigDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wxMiniappconfigDo) ReadDB() IWxMiniappconfigDo {
	return w.Clauses(dbresolver.Read)
}

func (w wxMiniappconfigDo) WriteDB() IWxMiniappconfigDo {
	return w.Clauses(dbresolver.Write)
}

func (w wxMiniappconfigDo) Clauses(conds ...clause.Expression) IWxMiniappconfigDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wxMiniappconfigDo) Returning(value interface{}, columns ...string) IWxMiniappconfigDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wxMiniappconfigDo) Not(conds ...gen.Condition) IWxMiniappconfigDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wxMiniappconfigDo) Or(conds ...gen.Condition) IWxMiniappconfigDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wxMiniappconfigDo) Select(conds ...field.Expr) IWxMiniappconfigDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wxMiniappconfigDo) Where(conds ...gen.Condition) IWxMiniappconfigDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wxMiniappconfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWxMiniappconfigDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wxMiniappconfigDo) Order(conds ...field.Expr) IWxMiniappconfigDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wxMiniappconfigDo) Distinct(cols ...field.Expr) IWxMiniappconfigDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wxMiniappconfigDo) Omit(cols ...field.Expr) IWxMiniappconfigDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wxMiniappconfigDo) Join(table schema.Tabler, on ...field.Expr) IWxMiniappconfigDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wxMiniappconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWxMiniappconfigDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wxMiniappconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IWxMiniappconfigDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wxMiniappconfigDo) Group(cols ...field.Expr) IWxMiniappconfigDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wxMiniappconfigDo) Having(conds ...gen.Condition) IWxMiniappconfigDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wxMiniappconfigDo) Limit(limit int) IWxMiniappconfigDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wxMiniappconfigDo) Offset(offset int) IWxMiniappconfigDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wxMiniappconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWxMiniappconfigDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wxMiniappconfigDo) Unscoped() IWxMiniappconfigDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wxMiniappconfigDo) Create(values ...*model.WxMiniappconfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wxMiniappconfigDo) CreateInBatches(values []*model.WxMiniappconfig, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wxMiniappconfigDo) Save(values ...*model.WxMiniappconfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wxMiniappconfigDo) First() (*model.WxMiniappconfig, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMiniappconfig), nil
	}
}

func (w wxMiniappconfigDo) Take() (*model.WxMiniappconfig, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMiniappconfig), nil
	}
}

func (w wxMiniappconfigDo) Last() (*model.WxMiniappconfig, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMiniappconfig), nil
	}
}

func (w wxMiniappconfigDo) Find() ([]*model.WxMiniappconfig, error) {
	result, err := w.DO.Find()
	return result.([]*model.WxMiniappconfig), err
}

func (w wxMiniappconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxMiniappconfig, err error) {
	buf := make([]*model.WxMiniappconfig, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wxMiniappconfigDo) FindInBatches(result *[]*model.WxMiniappconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wxMiniappconfigDo) Attrs(attrs ...field.AssignExpr) IWxMiniappconfigDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wxMiniappconfigDo) Assign(attrs ...field.AssignExpr) IWxMiniappconfigDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wxMiniappconfigDo) Joins(fields ...field.RelationField) IWxMiniappconfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wxMiniappconfigDo) Preload(fields ...field.RelationField) IWxMiniappconfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wxMiniappconfigDo) FirstOrInit() (*model.WxMiniappconfig, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMiniappconfig), nil
	}
}

func (w wxMiniappconfigDo) FirstOrCreate() (*model.WxMiniappconfig, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxMiniappconfig), nil
	}
}

func (w wxMiniappconfigDo) FindByPage(offset int, limit int) (result []*model.WxMiniappconfig, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wxMiniappconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wxMiniappconfigDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wxMiniappconfigDo) Delete(models ...*model.WxMiniappconfig) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wxMiniappconfigDo) withDO(do gen.Dao) *wxMiniappconfigDo {
	w.DO = *do.(*gen.DO)
	return w
}
