// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"yqnft/NFTManage/models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTUserRole(db *gorm.DB) tUserRole {
	_tUserRole := tUserRole{}

	_tUserRole.tUserRoleDo.UseDB(db)
	_tUserRole.tUserRoleDo.UseModel(&model.TUserRole{})

	tableName := _tUserRole.tUserRoleDo.TableName()
	_tUserRole.ALL = field.NewAsterisk(tableName)
	_tUserRole.ID = field.NewString(tableName, "id")
	_tUserRole.UserID = field.NewString(tableName, "userId")
	_tUserRole.RoleID = field.NewString(tableName, "roleId")
	_tUserRole.CreateTime = field.NewTime(tableName, "createTime")
	_tUserRole.CreateUserID = field.NewString(tableName, "createUserId")
	_tUserRole.UpdateTime = field.NewTime(tableName, "updateTime")
	_tUserRole.UpdateUserID = field.NewString(tableName, "updateUserId")
	_tUserRole.Bak1 = field.NewString(tableName, "bak1")
	_tUserRole.Bak2 = field.NewString(tableName, "bak2")
	_tUserRole.Bak3 = field.NewString(tableName, "bak3")
	_tUserRole.Bak4 = field.NewString(tableName, "bak4")
	_tUserRole.Bak5 = field.NewString(tableName, "bak5")

	_tUserRole.fillFieldMap()

	return _tUserRole
}

type tUserRole struct {
	tUserRoleDo tUserRoleDo

	ALL          field.Asterisk
	ID           field.String // 编号
	UserID       field.String // 用户编号
	RoleID       field.String // 角色编号
	CreateTime   field.Time
	CreateUserID field.String
	UpdateTime   field.Time
	UpdateUserID field.String
	Bak1         field.String
	Bak2         field.String
	Bak3         field.String
	Bak4         field.String
	Bak5         field.String

	fieldMap map[string]field.Expr
}

func (t tUserRole) Table(newTableName string) *tUserRole {
	t.tUserRoleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUserRole) As(alias string) *tUserRole {
	t.tUserRoleDo.DO = *(t.tUserRoleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUserRole) updateTableName(table string) *tUserRole {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.UserID = field.NewString(table, "userId")
	t.RoleID = field.NewString(table, "roleId")
	t.CreateTime = field.NewTime(table, "createTime")
	t.CreateUserID = field.NewString(table, "createUserId")
	t.UpdateTime = field.NewTime(table, "updateTime")
	t.UpdateUserID = field.NewString(table, "updateUserId")
	t.Bak1 = field.NewString(table, "bak1")
	t.Bak2 = field.NewString(table, "bak2")
	t.Bak3 = field.NewString(table, "bak3")
	t.Bak4 = field.NewString(table, "bak4")
	t.Bak5 = field.NewString(table, "bak5")

	t.fillFieldMap()

	return t
}

func (t *tUserRole) WithContext(ctx context.Context) ITUserRoleDo {
	return t.tUserRoleDo.WithContext(ctx)
}

func (t tUserRole) TableName() string { return t.tUserRoleDo.TableName() }

func (t tUserRole) Alias() string { return t.tUserRoleDo.Alias() }

func (t *tUserRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUserRole) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.ID
	t.fieldMap["userId"] = t.UserID
	t.fieldMap["roleId"] = t.RoleID
	t.fieldMap["createTime"] = t.CreateTime
	t.fieldMap["createUserId"] = t.CreateUserID
	t.fieldMap["updateTime"] = t.UpdateTime
	t.fieldMap["updateUserId"] = t.UpdateUserID
	t.fieldMap["bak1"] = t.Bak1
	t.fieldMap["bak2"] = t.Bak2
	t.fieldMap["bak3"] = t.Bak3
	t.fieldMap["bak4"] = t.Bak4
	t.fieldMap["bak5"] = t.Bak5
}

func (t tUserRole) clone(db *gorm.DB) tUserRole {
	t.tUserRoleDo.ReplaceDB(db)
	return t
}

type tUserRoleDo struct{ gen.DO }

type ITUserRoleDo interface {
	gen.SubQuery
	Debug() ITUserRoleDo
	WithContext(ctx context.Context) ITUserRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITUserRoleDo
	Not(conds ...gen.Condition) ITUserRoleDo
	Or(conds ...gen.Condition) ITUserRoleDo
	Select(conds ...field.Expr) ITUserRoleDo
	Where(conds ...gen.Condition) ITUserRoleDo
	Order(conds ...field.Expr) ITUserRoleDo
	Distinct(cols ...field.Expr) ITUserRoleDo
	Omit(cols ...field.Expr) ITUserRoleDo
	Join(table schema.Tabler, on ...field.Expr) ITUserRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITUserRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITUserRoleDo
	Group(cols ...field.Expr) ITUserRoleDo
	Having(conds ...gen.Condition) ITUserRoleDo
	Limit(limit int) ITUserRoleDo
	Offset(offset int) ITUserRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITUserRoleDo
	Unscoped() ITUserRoleDo
	Create(values ...*model.TUserRole) error
	CreateInBatches(values []*model.TUserRole, batchSize int) error
	Save(values ...*model.TUserRole) error
	First() (*model.TUserRole, error)
	Take() (*model.TUserRole, error)
	Last() (*model.TUserRole, error)
	Find() ([]*model.TUserRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUserRole, err error)
	FindInBatches(result *[]*model.TUserRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TUserRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITUserRoleDo
	Assign(attrs ...field.AssignExpr) ITUserRoleDo
	Joins(fields ...field.RelationField) ITUserRoleDo
	Preload(fields ...field.RelationField) ITUserRoleDo
	FirstOrInit() (*model.TUserRole, error)
	FirstOrCreate() (*model.TUserRole, error)
	FindByPage(offset int, limit int) (result []*model.TUserRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITUserRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tUserRoleDo) Debug() ITUserRoleDo {
	return t.withDO(t.DO.Debug())
}

func (t tUserRoleDo) WithContext(ctx context.Context) ITUserRoleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUserRoleDo) ReadDB() ITUserRoleDo {
	return t.Clauses(dbresolver.Read)
}

func (t tUserRoleDo) WriteDB() ITUserRoleDo {
	return t.Clauses(dbresolver.Write)
}

func (t tUserRoleDo) Clauses(conds ...clause.Expression) ITUserRoleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUserRoleDo) Returning(value interface{}, columns ...string) ITUserRoleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUserRoleDo) Not(conds ...gen.Condition) ITUserRoleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUserRoleDo) Or(conds ...gen.Condition) ITUserRoleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUserRoleDo) Select(conds ...field.Expr) ITUserRoleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUserRoleDo) Where(conds ...gen.Condition) ITUserRoleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUserRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITUserRoleDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUserRoleDo) Order(conds ...field.Expr) ITUserRoleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUserRoleDo) Distinct(cols ...field.Expr) ITUserRoleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUserRoleDo) Omit(cols ...field.Expr) ITUserRoleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUserRoleDo) Join(table schema.Tabler, on ...field.Expr) ITUserRoleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUserRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITUserRoleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUserRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) ITUserRoleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUserRoleDo) Group(cols ...field.Expr) ITUserRoleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUserRoleDo) Having(conds ...gen.Condition) ITUserRoleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUserRoleDo) Limit(limit int) ITUserRoleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUserRoleDo) Offset(offset int) ITUserRoleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUserRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITUserRoleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUserRoleDo) Unscoped() ITUserRoleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUserRoleDo) Create(values ...*model.TUserRole) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUserRoleDo) CreateInBatches(values []*model.TUserRole, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUserRoleDo) Save(values ...*model.TUserRole) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUserRoleDo) First() (*model.TUserRole, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserRole), nil
	}
}

func (t tUserRoleDo) Take() (*model.TUserRole, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserRole), nil
	}
}

func (t tUserRoleDo) Last() (*model.TUserRole, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserRole), nil
	}
}

func (t tUserRoleDo) Find() ([]*model.TUserRole, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUserRole), err
}

func (t tUserRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUserRole, err error) {
	buf := make([]*model.TUserRole, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUserRoleDo) FindInBatches(result *[]*model.TUserRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUserRoleDo) Attrs(attrs ...field.AssignExpr) ITUserRoleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUserRoleDo) Assign(attrs ...field.AssignExpr) ITUserRoleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUserRoleDo) Joins(fields ...field.RelationField) ITUserRoleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tUserRoleDo) Preload(fields ...field.RelationField) ITUserRoleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tUserRoleDo) FirstOrInit() (*model.TUserRole, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserRole), nil
	}
}

func (t tUserRoleDo) FirstOrCreate() (*model.TUserRole, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserRole), nil
	}
}

func (t tUserRoleDo) FindByPage(offset int, limit int) (result []*model.TUserRole, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUserRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tUserRoleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tUserRoleDo) Delete(models ...*model.TUserRole) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tUserRoleDo) withDO(do gen.Dao) *tUserRoleDo {
	t.DO = *do.(*gen.DO)
	return t
}
