// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"yqnft/NFTManage/models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWxPayconfig(db *gorm.DB) wxPayconfig {
	_wxPayconfig := wxPayconfig{}

	_wxPayconfig.wxPayconfigDo.UseDB(db)
	_wxPayconfig.wxPayconfigDo.UseModel(&model.WxPayconfig{})

	tableName := _wxPayconfig.wxPayconfigDo.TableName()
	_wxPayconfig.ALL = field.NewAsterisk(tableName)
	_wxPayconfig.ID = field.NewString(tableName, "id")
	_wxPayconfig.OrgID = field.NewString(tableName, "orgId")
	_wxPayconfig.AppID = field.NewString(tableName, "appId")
	_wxPayconfig.Secret = field.NewString(tableName, "secret")
	_wxPayconfig.MchID = field.NewString(tableName, "mchId")
	_wxPayconfig.Key = field.NewString(tableName, "key")
	_wxPayconfig.APIV3Key = field.NewString(tableName, "apiV3Key")
	_wxPayconfig.CertificateFile = field.NewString(tableName, "certificateFile")
	_wxPayconfig.NotifyURL = field.NewString(tableName, "notifyUrl")
	_wxPayconfig.SignType = field.NewString(tableName, "signType")
	_wxPayconfig.Active = field.NewInt64(tableName, "active")
	_wxPayconfig.Bak1 = field.NewString(tableName, "bak1")
	_wxPayconfig.Bak2 = field.NewString(tableName, "bak2")
	_wxPayconfig.Bak3 = field.NewString(tableName, "bak3")
	_wxPayconfig.Bak4 = field.NewString(tableName, "bak4")
	_wxPayconfig.Bak5 = field.NewString(tableName, "bak5")

	_wxPayconfig.fillFieldMap()

	return _wxPayconfig
}

type wxPayconfig struct {
	wxPayconfigDo wxPayconfigDo

	ALL             field.Asterisk
	ID              field.String
	OrgID           field.String // 站点Id
	AppID           field.String // 开发者Id
	Secret          field.String // 应用密钥
	MchID           field.String // 微信支付商户号
	Key             field.String // 交易过程生成签名的密钥，仅保留在商户系统和微信支付后台，不会在网络中传播
	APIV3Key        field.String // V3秘钥
	CertificateFile field.String // 证书地址,绝对路径
	NotifyURL       field.String // 通知地址
	SignType        field.String // 加密方式,MD5和HMAC-SHA256
	Active          field.Int64  // 状态 0不可用,1可用
	Bak1            field.String
	Bak2            field.String
	Bak3            field.String
	Bak4            field.String
	Bak5            field.String

	fieldMap map[string]field.Expr
}

func (w wxPayconfig) Table(newTableName string) *wxPayconfig {
	w.wxPayconfigDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wxPayconfig) As(alias string) *wxPayconfig {
	w.wxPayconfigDo.DO = *(w.wxPayconfigDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wxPayconfig) updateTableName(table string) *wxPayconfig {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewString(table, "id")
	w.OrgID = field.NewString(table, "orgId")
	w.AppID = field.NewString(table, "appId")
	w.Secret = field.NewString(table, "secret")
	w.MchID = field.NewString(table, "mchId")
	w.Key = field.NewString(table, "key")
	w.APIV3Key = field.NewString(table, "apiV3Key")
	w.CertificateFile = field.NewString(table, "certificateFile")
	w.NotifyURL = field.NewString(table, "notifyUrl")
	w.SignType = field.NewString(table, "signType")
	w.Active = field.NewInt64(table, "active")
	w.Bak1 = field.NewString(table, "bak1")
	w.Bak2 = field.NewString(table, "bak2")
	w.Bak3 = field.NewString(table, "bak3")
	w.Bak4 = field.NewString(table, "bak4")
	w.Bak5 = field.NewString(table, "bak5")

	w.fillFieldMap()

	return w
}

func (w *wxPayconfig) WithContext(ctx context.Context) IWxPayconfigDo {
	return w.wxPayconfigDo.WithContext(ctx)
}

func (w wxPayconfig) TableName() string { return w.wxPayconfigDo.TableName() }

func (w wxPayconfig) Alias() string { return w.wxPayconfigDo.Alias() }

func (w *wxPayconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wxPayconfig) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 16)
	w.fieldMap["id"] = w.ID
	w.fieldMap["orgId"] = w.OrgID
	w.fieldMap["appId"] = w.AppID
	w.fieldMap["secret"] = w.Secret
	w.fieldMap["mchId"] = w.MchID
	w.fieldMap["key"] = w.Key
	w.fieldMap["apiV3Key"] = w.APIV3Key
	w.fieldMap["certificateFile"] = w.CertificateFile
	w.fieldMap["notifyUrl"] = w.NotifyURL
	w.fieldMap["signType"] = w.SignType
	w.fieldMap["active"] = w.Active
	w.fieldMap["bak1"] = w.Bak1
	w.fieldMap["bak2"] = w.Bak2
	w.fieldMap["bak3"] = w.Bak3
	w.fieldMap["bak4"] = w.Bak4
	w.fieldMap["bak5"] = w.Bak5
}

func (w wxPayconfig) clone(db *gorm.DB) wxPayconfig {
	w.wxPayconfigDo.ReplaceDB(db)
	return w
}

type wxPayconfigDo struct{ gen.DO }

type IWxPayconfigDo interface {
	gen.SubQuery
	Debug() IWxPayconfigDo
	WithContext(ctx context.Context) IWxPayconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWxPayconfigDo
	Not(conds ...gen.Condition) IWxPayconfigDo
	Or(conds ...gen.Condition) IWxPayconfigDo
	Select(conds ...field.Expr) IWxPayconfigDo
	Where(conds ...gen.Condition) IWxPayconfigDo
	Order(conds ...field.Expr) IWxPayconfigDo
	Distinct(cols ...field.Expr) IWxPayconfigDo
	Omit(cols ...field.Expr) IWxPayconfigDo
	Join(table schema.Tabler, on ...field.Expr) IWxPayconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWxPayconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWxPayconfigDo
	Group(cols ...field.Expr) IWxPayconfigDo
	Having(conds ...gen.Condition) IWxPayconfigDo
	Limit(limit int) IWxPayconfigDo
	Offset(offset int) IWxPayconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWxPayconfigDo
	Unscoped() IWxPayconfigDo
	Create(values ...*model.WxPayconfig) error
	CreateInBatches(values []*model.WxPayconfig, batchSize int) error
	Save(values ...*model.WxPayconfig) error
	First() (*model.WxPayconfig, error)
	Take() (*model.WxPayconfig, error)
	Last() (*model.WxPayconfig, error)
	Find() ([]*model.WxPayconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxPayconfig, err error)
	FindInBatches(result *[]*model.WxPayconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WxPayconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWxPayconfigDo
	Assign(attrs ...field.AssignExpr) IWxPayconfigDo
	Joins(fields ...field.RelationField) IWxPayconfigDo
	Preload(fields ...field.RelationField) IWxPayconfigDo
	FirstOrInit() (*model.WxPayconfig, error)
	FirstOrCreate() (*model.WxPayconfig, error)
	FindByPage(offset int, limit int) (result []*model.WxPayconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWxPayconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wxPayconfigDo) Debug() IWxPayconfigDo {
	return w.withDO(w.DO.Debug())
}

func (w wxPayconfigDo) WithContext(ctx context.Context) IWxPayconfigDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wxPayconfigDo) ReadDB() IWxPayconfigDo {
	return w.Clauses(dbresolver.Read)
}

func (w wxPayconfigDo) WriteDB() IWxPayconfigDo {
	return w.Clauses(dbresolver.Write)
}

func (w wxPayconfigDo) Clauses(conds ...clause.Expression) IWxPayconfigDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wxPayconfigDo) Returning(value interface{}, columns ...string) IWxPayconfigDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wxPayconfigDo) Not(conds ...gen.Condition) IWxPayconfigDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wxPayconfigDo) Or(conds ...gen.Condition) IWxPayconfigDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wxPayconfigDo) Select(conds ...field.Expr) IWxPayconfigDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wxPayconfigDo) Where(conds ...gen.Condition) IWxPayconfigDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wxPayconfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWxPayconfigDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wxPayconfigDo) Order(conds ...field.Expr) IWxPayconfigDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wxPayconfigDo) Distinct(cols ...field.Expr) IWxPayconfigDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wxPayconfigDo) Omit(cols ...field.Expr) IWxPayconfigDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wxPayconfigDo) Join(table schema.Tabler, on ...field.Expr) IWxPayconfigDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wxPayconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWxPayconfigDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wxPayconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IWxPayconfigDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wxPayconfigDo) Group(cols ...field.Expr) IWxPayconfigDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wxPayconfigDo) Having(conds ...gen.Condition) IWxPayconfigDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wxPayconfigDo) Limit(limit int) IWxPayconfigDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wxPayconfigDo) Offset(offset int) IWxPayconfigDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wxPayconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWxPayconfigDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wxPayconfigDo) Unscoped() IWxPayconfigDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wxPayconfigDo) Create(values ...*model.WxPayconfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wxPayconfigDo) CreateInBatches(values []*model.WxPayconfig, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wxPayconfigDo) Save(values ...*model.WxPayconfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wxPayconfigDo) First() (*model.WxPayconfig, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxPayconfig), nil
	}
}

func (w wxPayconfigDo) Take() (*model.WxPayconfig, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxPayconfig), nil
	}
}

func (w wxPayconfigDo) Last() (*model.WxPayconfig, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxPayconfig), nil
	}
}

func (w wxPayconfigDo) Find() ([]*model.WxPayconfig, error) {
	result, err := w.DO.Find()
	return result.([]*model.WxPayconfig), err
}

func (w wxPayconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WxPayconfig, err error) {
	buf := make([]*model.WxPayconfig, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wxPayconfigDo) FindInBatches(result *[]*model.WxPayconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wxPayconfigDo) Attrs(attrs ...field.AssignExpr) IWxPayconfigDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wxPayconfigDo) Assign(attrs ...field.AssignExpr) IWxPayconfigDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wxPayconfigDo) Joins(fields ...field.RelationField) IWxPayconfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wxPayconfigDo) Preload(fields ...field.RelationField) IWxPayconfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wxPayconfigDo) FirstOrInit() (*model.WxPayconfig, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxPayconfig), nil
	}
}

func (w wxPayconfigDo) FirstOrCreate() (*model.WxPayconfig, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WxPayconfig), nil
	}
}

func (w wxPayconfigDo) FindByPage(offset int, limit int) (result []*model.WxPayconfig, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wxPayconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wxPayconfigDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wxPayconfigDo) Delete(models ...*model.WxPayconfig) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wxPayconfigDo) withDO(do gen.Dao) *wxPayconfigDo {
	w.DO = *do.(*gen.DO)
	return w
}
