// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"yqnft/NFTManage/models/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLockTable(db *gorm.DB) lockTable {
	_lockTable := lockTable{}

	_lockTable.lockTableDo.UseDB(db)
	_lockTable.lockTableDo.UseModel(&model.LockTable{})

	tableName := _lockTable.lockTableDo.TableName()
	_lockTable.ALL = field.NewAsterisk(tableName)
	_lockTable.RowKey = field.NewString(tableName, "row_key")
	_lockTable.Xid = field.NewString(tableName, "xid")
	_lockTable.TransactionID = field.NewInt64(tableName, "transaction_id")
	_lockTable.BranchID = field.NewInt64(tableName, "branch_id")
	_lockTable.ResourceID = field.NewString(tableName, "resource_id")
	_lockTable.TableName = field.NewString(tableName, "table_name")
	_lockTable.Pk = field.NewString(tableName, "pk")
	_lockTable.GmtCreate = field.NewTime(tableName, "gmt_create")
	_lockTable.GmtModified = field.NewTime(tableName, "gmt_modified")

	_lockTable.fillFieldMap()

	return _lockTable
}

type lockTable struct {
	lockTableDo lockTableDo

	ALL           field.Asterisk
	RowKey        field.String
	Xid           field.String
	TransactionID field.Int64
	BranchID      field.Int64
	ResourceID    field.String
	TableName     field.String
	Pk            field.String
	GmtCreate     field.Time
	GmtModified   field.Time

	fieldMap map[string]field.Expr
}

func (l lockTable) Table(newTableName string) *lockTable {
	l.lockTableDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lockTable) As(alias string) *lockTable {
	l.lockTableDo.DO = *(l.lockTableDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lockTable) updateTableName(table string) *lockTable {
	l.ALL = field.NewAsterisk(table)
	l.RowKey = field.NewString(table, "row_key")
	l.Xid = field.NewString(table, "xid")
	l.TransactionID = field.NewInt64(table, "transaction_id")
	l.BranchID = field.NewInt64(table, "branch_id")
	l.ResourceID = field.NewString(table, "resource_id")
	l.TableName = field.NewString(table, "table_name")
	l.Pk = field.NewString(table, "pk")
	l.GmtCreate = field.NewTime(table, "gmt_create")
	l.GmtModified = field.NewTime(table, "gmt_modified")

	l.fillFieldMap()

	return l
}

func (l *lockTable) WithContext(ctx context.Context) ILockTableDo {
	return l.lockTableDo.WithContext(ctx)
}

func (l lockTable) TableName() string { return l.lockTableDo.TableName() }

func (l lockTable) Alias() string { return l.lockTableDo.Alias() }

func (l *lockTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lockTable) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 9)
	l.fieldMap["row_key"] = l.RowKey
	l.fieldMap["xid"] = l.Xid
	l.fieldMap["transaction_id"] = l.TransactionID
	l.fieldMap["branch_id"] = l.BranchID
	l.fieldMap["resource_id"] = l.ResourceID
	l.fieldMap["table_name"] = l.TableName
	l.fieldMap["pk"] = l.Pk
	l.fieldMap["gmt_create"] = l.GmtCreate
	l.fieldMap["gmt_modified"] = l.GmtModified
}

func (l lockTable) clone(db *gorm.DB) lockTable {
	l.lockTableDo.ReplaceDB(db)
	return l
}

type lockTableDo struct{ gen.DO }

type ILockTableDo interface {
	gen.SubQuery
	Debug() ILockTableDo
	WithContext(ctx context.Context) ILockTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILockTableDo
	Not(conds ...gen.Condition) ILockTableDo
	Or(conds ...gen.Condition) ILockTableDo
	Select(conds ...field.Expr) ILockTableDo
	Where(conds ...gen.Condition) ILockTableDo
	Order(conds ...field.Expr) ILockTableDo
	Distinct(cols ...field.Expr) ILockTableDo
	Omit(cols ...field.Expr) ILockTableDo
	Join(table schema.Tabler, on ...field.Expr) ILockTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILockTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILockTableDo
	Group(cols ...field.Expr) ILockTableDo
	Having(conds ...gen.Condition) ILockTableDo
	Limit(limit int) ILockTableDo
	Offset(offset int) ILockTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILockTableDo
	Unscoped() ILockTableDo
	Create(values ...*model.LockTable) error
	CreateInBatches(values []*model.LockTable, batchSize int) error
	Save(values ...*model.LockTable) error
	First() (*model.LockTable, error)
	Take() (*model.LockTable, error)
	Last() (*model.LockTable, error)
	Find() ([]*model.LockTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LockTable, err error)
	FindInBatches(result *[]*model.LockTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LockTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILockTableDo
	Assign(attrs ...field.AssignExpr) ILockTableDo
	Joins(fields ...field.RelationField) ILockTableDo
	Preload(fields ...field.RelationField) ILockTableDo
	FirstOrInit() (*model.LockTable, error)
	FirstOrCreate() (*model.LockTable, error)
	FindByPage(offset int, limit int) (result []*model.LockTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILockTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lockTableDo) Debug() ILockTableDo {
	return l.withDO(l.DO.Debug())
}

func (l lockTableDo) WithContext(ctx context.Context) ILockTableDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lockTableDo) ReadDB() ILockTableDo {
	return l.Clauses(dbresolver.Read)
}

func (l lockTableDo) WriteDB() ILockTableDo {
	return l.Clauses(dbresolver.Write)
}

func (l lockTableDo) Clauses(conds ...clause.Expression) ILockTableDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lockTableDo) Returning(value interface{}, columns ...string) ILockTableDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lockTableDo) Not(conds ...gen.Condition) ILockTableDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lockTableDo) Or(conds ...gen.Condition) ILockTableDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lockTableDo) Select(conds ...field.Expr) ILockTableDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lockTableDo) Where(conds ...gen.Condition) ILockTableDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lockTableDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILockTableDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lockTableDo) Order(conds ...field.Expr) ILockTableDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lockTableDo) Distinct(cols ...field.Expr) ILockTableDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lockTableDo) Omit(cols ...field.Expr) ILockTableDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lockTableDo) Join(table schema.Tabler, on ...field.Expr) ILockTableDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lockTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILockTableDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lockTableDo) RightJoin(table schema.Tabler, on ...field.Expr) ILockTableDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lockTableDo) Group(cols ...field.Expr) ILockTableDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lockTableDo) Having(conds ...gen.Condition) ILockTableDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lockTableDo) Limit(limit int) ILockTableDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lockTableDo) Offset(offset int) ILockTableDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lockTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILockTableDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lockTableDo) Unscoped() ILockTableDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lockTableDo) Create(values ...*model.LockTable) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lockTableDo) CreateInBatches(values []*model.LockTable, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lockTableDo) Save(values ...*model.LockTable) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lockTableDo) First() (*model.LockTable, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LockTable), nil
	}
}

func (l lockTableDo) Take() (*model.LockTable, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LockTable), nil
	}
}

func (l lockTableDo) Last() (*model.LockTable, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LockTable), nil
	}
}

func (l lockTableDo) Find() ([]*model.LockTable, error) {
	result, err := l.DO.Find()
	return result.([]*model.LockTable), err
}

func (l lockTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LockTable, err error) {
	buf := make([]*model.LockTable, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lockTableDo) FindInBatches(result *[]*model.LockTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lockTableDo) Attrs(attrs ...field.AssignExpr) ILockTableDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lockTableDo) Assign(attrs ...field.AssignExpr) ILockTableDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lockTableDo) Joins(fields ...field.RelationField) ILockTableDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lockTableDo) Preload(fields ...field.RelationField) ILockTableDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lockTableDo) FirstOrInit() (*model.LockTable, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LockTable), nil
	}
}

func (l lockTableDo) FirstOrCreate() (*model.LockTable, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LockTable), nil
	}
}

func (l lockTableDo) FindByPage(offset int, limit int) (result []*model.LockTable, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lockTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lockTableDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lockTableDo) Delete(models ...*model.LockTable) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lockTableDo) withDO(do gen.Dao) *lockTableDo {
	l.DO = *do.(*gen.DO)
	return l
}
