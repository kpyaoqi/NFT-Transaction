// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"
)

const TableNameNftOrder = "nft_order"

// NftOrder mapped from table <nft_order>
type NftOrder struct {
	ID            string    `gorm:"column:id;type:varchar(50);primaryKey" json:"id"`                 // 唯一标识
	ChainPlatCert string    `gorm:"column:chainPlatCert;type:json;default:{}" json:"chainPlatCert"`  // 在不同链平台上链,认证后的数据json
	Gas           float64   `gorm:"column:gas;type:decimal(20,2)" json:"gas"`                        // gas总费
	FromUser      string    `gorm:"column:fromUser;type:varchar(50);not null" json:"fromUser"`       // 卖方
	ToUser        string    `gorm:"column:toUser;type:varchar(50);not null" json:"toUser"`           // 买方
	AssetsID      string    `gorm:"column:assetsId;type:varchar(50);not null" json:"assetsId"`       // 交易品标识(作品)
	Num           int64     `gorm:"column:num;type:int(11);not null" json:"num"`                     // 交易品数量
	Price         float64   `gorm:"column:price;type:decimal(20,2);not null" json:"price"`           // 单价
	Total         float64   `gorm:"column:total;type:decimal(20,2);not null" json:"total"`           // 商品总额
	Commission    float64   `gorm:"column:commission;type:decimal(20,2)" json:"commission"`          // 佣金(支付给平台的费用)
	Taxes         float64   `gorm:"column:taxes;type:decimal(20,2)" json:"taxes"`                    // 税费(二次交易,支付给作者的费用)=(版税*商品总额)
	SellerAmount  float64   `gorm:"column:sellerAmount;type:decimal(20,2)" json:"sellerAmount"`      // 卖家收到的金额
	TradeTotal    float64   `gorm:"column:tradeTotal;type:decimal(20,2);not null" json:"tradeTotal"` // 交易总额
	PayPlat       int64     `gorm:"column:payPlat;type:int(11)" json:"payPlat"`                      // 支付平台(0:微信支付,1支付宝...)
	TradeType     int64     `gorm:"column:tradeType;type:int(11);not null" json:"tradeType"`         // 交易类型(0:充值,1:上架合集,2:下架合集,3:上架商品,4:下架商品,5:交易作品,6:转移作品)
	TxTime        time.Time `gorm:"column:txTime;type:datetime;default:null" json:"txTime"`          // 交易时间
	TransactionID string    `gorm:"column:transactionId;type:varchar(100)" json:"transactionId"`     // 支付平台支付订单号
	PayState      int64     `gorm:"column:payState;type:int(11);not null" json:"payState"`           // 支付状态.0:未支付,1:已支付,2:已取消
	CodeURL       string    `gorm:"column:codeUrl;type:varchar(500)" json:"codeUrl"`                 // 支付二维码
	PrepayID      string    `gorm:"column:prepayId;type:varchar(100)" json:"prepayId"`               // 预支付id
	CreateTime    time.Time `gorm:"column:createTime;type:datetime;default:null" json:"createTime"`
	UpdateTime    time.Time `gorm:"column:updateTime;type:datetime;default:null" json:"updateTime"`
	Bak1          string    `gorm:"column:bak1;type:varchar(255)" json:"bak1"`
	Bak2          string    `gorm:"column:bak2;type:varchar(255)" json:"bak2"`
	Bak3          string    `gorm:"column:bak3;type:varchar(255)" json:"bak3"`
}

// TableName NftOrder's table name
func (*NftOrder) TableName() string {
	return TableNameNftOrder
}
